var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.9","fields":["title","body"],"fieldVectors":[["title/controllers/AppController.html",[0,1.302,1,2.281]],["body/controllers/AppController.html",[0,1.966,1,3.446,2,1.43,3,0.461,4,0.461,5,0.417,6,3.409,7,0.603,8,1.601,9,5.094,10,1.767,11,0.026,12,4.037,13,5.179,14,5.179,15,3.13,16,0.822,17,4.037,18,1.166,19,0.784,20,0.763,21,3.13,22,2.439,23,1.767,24,3.165,25,3.409,26,4.037,27,0.461,28,0.113,29,2.234,30,1.533,31,2.439,32,1.43,33,4.037,34,0.02,35,0.02]],["title/classes/AppGateway.html",[28,0.096,36,2.281]],["body/classes/AppGateway.html",[3,0.434,4,0.434,5,0.393,7,0.568,8,1.54,10,2.182,11,0.026,16,1.015,18,1.098,19,0.683,27,0.434,28,0.106,34,0.019,35,0.019,36,3.316,37,1.794,38,3.212,39,2.03,40,6.282,41,4.983,42,0.873,43,5.558,44,3.804,45,3.804,46,1.839,47,4.983,48,3.804,49,1.176,50,0.958,51,1.176,52,5.558,53,4.208,54,3.804,55,3.804,56,3.804,57,3.212,58,3.804,59,3.804,60,3.804,61,3.804,62,3.804,63,3.804]],["title/modules/AppModule.html",[64,1.06,65,2.281]],["body/modules/AppModule.html",[1,3.291,2,1.514,3,0.346,4,0.346,5,0.313,11,0.027,19,0.87,20,0.574,24,3.25,25,2.562,27,0.346,28,0.085,34,0.016,35,0.016,36,2.843,64,1.321,65,4.464,66,1.236,67,1.741,68,2.562,69,2.562,70,2.562,71,3.548,72,3.548,73,2.571,74,3.548,75,3.548,76,3.548,77,2.016,78,1.431,79,1.328,80,3.034,81,2.178,82,2.582,83,3.034,84,3.034,85,3.034,86,3.034,87,3.034,88,0.938,89,1.236,90,3.034,91,3.034,92,3.034]],["title/injectables/AppService.html",[24,1.897,93,0.863]],["body/injectables/AppService.html",[3,0.468,4,0.468,5,0.424,7,0.613,8,1.618,9,4.42,11,0.026,15,3.163,16,0.835,18,1.185,19,0.563,20,0.776,24,2.897,27,0.468,28,0.114,32,1.454,34,0.02,35,0.02,42,0.719,46,2.074,49,1.268,50,1.033,51,1.268,93,1.318,94,1.797,95,3.465,96,5.234,97,4.104,98,5.234,99,5.234,100,3.465,101,4.104,102,4.104,103,4.104]],["title/controllers/AuthController.html",[0,1.302,104,2.281]],["body/controllers/AuthController.html",[0,1.322,2,1.234,3,0.397,4,0.397,5,0.36,7,0.52,8,1.452,10,1.525,11,0.026,16,0.709,18,1.005,19,0.815,20,0.658,21,2.84,22,2.104,23,1.525,27,0.397,28,0.097,29,1.927,30,1.322,31,2.104,32,1.234,34,0.018,35,0.018,42,0.61,49,1.076,50,0.877,51,1.076,104,3.127,105,2.941,106,2.584,107,3.487,108,3.968,109,2.941,110,3.702,111,3.482,112,4.699,113,1.183,114,1.555,115,4.699,116,3.487,117,4.699,118,3.482,119,2.601,120,2.584,121,3.482,122,3.482,123,3.487,124,2.167,125,2.941,126,2.941,127,2.941,128,2.584,129,2.584,130,2.941,131,3.482,132,3.482,133,3.482,134,3.482,135,3.482]],["title/modules/AuthModule.html",[64,1.06,71,2.072]],["body/modules/AuthModule.html",[2,1.454,3,0.327,4,0.327,5,0.296,11,0.027,19,0.87,20,0.542,27,0.327,28,0.08,34,0.016,35,0.016,64,1.268,66,1.168,67,1.672,71,4.025,73,2.523,77,1.936,78,1.352,79,1.255,81,2.093,82,2.48,89,1.168,104,3.19,124,2.348,125,2.421,136,2.421,137,2.421,138,2.867,139,2.348,140,3.483,141,2.042,142,2.188,143,1.907,144,2.867,145,2.421,146,1.461,147,2.421,148,1.732,149,1.732,150,1.907,151,1.088,152,1.352,153,1.586,154,1.461,155,2.867,156,2.867,157,2.421,158,2.421,159,1.907,160,2.867,161,2.867,162,2.421,163,2.867,164,2.867,165,2.867]],["title/injectables/AuthService.html",[93,0.863,124,1.397]],["body/injectables/AuthService.html",[3,0.363,4,0.363,5,0.328,7,0.475,8,1.365,11,0.027,16,0.899,18,0.918,19,0.817,20,0.601,27,0.363,28,0.089,30,1.676,32,1.127,34,0.017,35,0.017,42,0.774,49,1.365,50,1.112,51,1.365,93,1.112,94,1.392,107,2.359,108,3.729,109,3.729,110,3.48,113,1.112,114,1.678,116,2.359,119,2.444,124,1.799,126,2.685,127,2.685,128,2.359,129,2.359,130,2.685,146,1.621,166,2.685,167,2.586,168,2.444,169,1.76,170,1.942,171,4.068,172,3.18,173,2.444,174,3.18,175,1.621,176,1.922,177,1.922,178,2.359,179,2.669,180,1.621,181,1.621,182,3.18,183,4.416,184,1.922,185,1.922,186,2.685,187,3.18,188,1.76,189,2.116]],["title/classes/Card.html",[28,0.096,190,2.072]],["body/classes/Card.html",[3,0.53,4,0.53,5,0.479,7,0.693,11,0.025,16,1.151,27,0.53,28,0.129,34,0.022,35,0.022,37,2.19,39,2.303,42,0.814,46,1.87,114,2.016,190,3.416,191,3.921,192,5.146,193,4.643,194,4.643,195,3.09]],["title/modules/CardModule.html",[64,1.06,72,2.072]],["body/modules/CardModule.html",[2,1.145,3,0.369,4,0.369,5,0.334,11,0.027,19,0.858,20,0.611,27,0.369,28,0.09,34,0.017,35,0.017,64,1.38,66,1.317,67,1.819,72,4.052,73,2.623,77,2.107,78,1.525,79,1.415,81,2.277,82,2.699,89,1.317,124,2.44,139,2.44,141,2.122,142,2.274,143,1.982,146,1.648,150,2.151,151,1.227,152,1.525,153,1.789,154,1.648,171,2.972,196,3.232,197,3.232,198,3.232,199,3.232,200,2.151,201,3.232]],["title/injectables/CardService.html",[93,0.863,139,1.397]],["body/injectables/CardService.html",[3,0.333,4,0.333,5,0.301,7,0.436,8,1.284,11,0.027,16,0.986,18,1.2,19,0.836,20,0.552,27,0.333,28,0.081,30,1.578,34,0.016,35,0.016,42,0.848,46,1.602,49,1.496,50,1.219,51,1.496,93,1.046,94,1.277,113,0.735,119,2.3,139,1.693,143,2.017,154,1.487,167,2.468,168,2.3,169,1.614,170,1.869,173,2.679,175,1.487,179,2.511,180,2.69,181,1.487,188,1.614,190,2.511,202,2.463,203,4.156,204,3.51,205,2.917,206,2.917,207,2.926,208,2.917,209,2.917,210,4.088,211,4.156,212,2.917,213,1.941,214,1.941,215,1.614,216,3.592,217,2.463,218,2.3,219,1.941,220,1.487,221,1.487,222,1.763,223,2.917,224,2.917,225,2.917,226,1.941,227,2.917,228,2.463,229,2.917,230,2.917,231,2.917,232,2.164,233,2.917]],["title/classes/CreateRoomAndUserDto.html",[28,0.096,234,2.072]],["body/classes/CreateRoomAndUserDto.html",[3,0.311,4,0.311,5,0.281,7,0.407,10,2.239,11,0.026,16,1.041,19,0.542,23,1.193,27,0.311,28,0.11,34,0.015,35,0.015,37,1.285,39,1.612,42,0.896,46,1.691,50,1.367,88,1.886,113,0.996,151,2.061,207,3.423,218,2.19,234,2.391,235,4.029,236,2.301,237,3.1,238,3.005,239,2.815,240,2.724,241,3.957,242,5.113,243,3.957,244,5.113,245,2.391,246,3.957,247,4.317,248,5.113,249,4.442,250,2.724,251,2.724,252,2.724,253,3.957,254,2.724,255,2.301,256,3.957,257,3.957,258,2.724,259,2.724,260,3.957,261,5.113,262,2.724,263,4.029,264,4.659,265,4.659,266,4.659,267,3.934,268,2.724,269,2.724,270,2.724,271,1.813,272,2.724,273,2.724,274,3.402,275,2.724,276,2.724,277,2.724,278,2.724]],["title/classes/JoinUserRoom.html",[28,0.096,279,2.072]],["body/classes/JoinUserRoom.html",[3,0.406,4,0.406,5,0.367,7,0.531,10,2.087,11,0.026,16,0.971,19,0.654,23,1.558,27,0.406,28,0.133,34,0.018,35,0.018,37,1.678,39,1.942,42,0.835,46,1.9,50,1.2,88,1.473,113,1.585,114,1.577,238,2.975,249,4.262,255,3.004,263,3.989,267,4.026,271,2.367,274,3.172,279,2.881,280,4.54,281,3.004,282,3.249,283,4.767,284,4.767,285,3.558,286,3.004,287,4.026,288,4.026,289,4.026,290,4.026,291,4.026,292,4.026,293,3.558,294,4.026]],["title/injectables/JwtStrategy.html",[93,0.863,140,2.072]],["body/injectables/JwtStrategy.html",[3,0.322,4,0.322,5,0.292,7,0.422,8,1.255,11,0.027,16,0.827,18,0.816,19,0.786,20,0.534,27,0.322,28,0.079,29,1.564,30,1.073,32,1.001,34,0.016,35,0.016,42,0.911,46,0.935,49,1.255,50,1.197,51,1.255,88,0.873,93,1.023,94,1.237,113,1.023,114,1.72,129,2.096,140,2.455,148,1.707,159,1.88,162,2.386,167,2.425,168,1.564,169,1.564,170,1.842,173,2.248,175,1.441,180,2.071,181,1.441,184,2.874,185,3.142,188,2.248,189,1.88,195,1.88,220,1.441,221,1.441,222,1.707,238,2.248,245,1.707,282,1.707,295,2.386,296,4.062,297,2.826,298,4.062,299,3.43,300,2.826,301,2.826,302,2.386,303,2.826,304,2.826,305,2.826,306,2.386,307,2.455,308,2.096,309,2.386,310,2.826,311,2.826,312,2.826,313,2.826,314,2.826,315,2.826,316,2.826,317,2.386,318,2.096,319,2.826,320,1.88,321,1.88,322,2.386,323,2.826,324,2.826,325,2.826,326,2.703,327,2.826,328,2.826,329,2.826,330,2.826]],["title/modules/PrismaModule.html",[64,1.06,73,1.501]],["body/modules/PrismaModule.html",[3,0.476,4,0.476,5,0.431,11,0.026,19,0.725,20,0.789,27,0.476,28,0.116,34,0.02,35,0.02,64,1.635,66,1.7,67,2.155,73,2.864,77,2.495,78,1.968,79,1.827,81,2.697,170,2.412,331,3.524,332,3.524,333,3.524,334,4.173,335,5.29,336,4.173]],["title/injectables/PrismaService.html",[93,0.863,170,1.215]],["body/injectables/PrismaService.html",[3,0.431,4,0.431,5,0.39,7,0.564,8,1.532,11,0.026,16,1.009,18,1.432,19,0.68,20,0.714,27,0.431,28,0.105,34,0.019,35,0.019,42,0.661,49,1.167,50,0.95,51,1.167,93,1.248,94,1.653,167,3.258,170,1.757,181,2.528,215,2.089,309,4.187,337,3.188,338,5.537,339,4.958,340,6.269,341,4.958,342,5.88,343,3.775,344,3.775,345,3.775,346,3.775,347,3.775,348,3.775,349,3.775]],["title/classes/Room.html",[28,0.096,88,1.06]],["body/classes/Room.html",[3,0.455,4,0.455,5,0.412,7,0.595,11,0.026,15,3.436,16,1.265,19,0.547,27,0.455,28,0.111,34,0.02,35,0.02,37,1.881,39,2.093,42,1.089,46,1.987,50,1.432,88,1.588,113,1.004,114,1.881,207,3.629,237,3.783,239,3.436,350,3.367,351,3.988,352,3.988,353,3.988,354,5.139,355,3.988,356,3.988,357,3.367]],["title/controllers/RoomController.html",[0,1.302,358,2.281]],["body/controllers/RoomController.html",[0,1.223,2,1.141,3,0.368,4,0.368,5,0.333,7,0.481,8,1.377,10,1.951,11,0.026,16,0.907,18,1.287,19,0.821,20,0.609,21,3.087,22,1.947,23,1.41,27,0.368,28,0.09,29,1.783,30,1.223,31,2.693,32,1.578,34,0.017,35,0.017,42,0.565,49,0.996,50,0.811,51,0.996,88,1.579,106,2.39,113,1.122,114,1.066,116,3.306,141,1.81,148,1.947,307,3.331,308,2.39,320,2.965,326,2.965,358,2.965,359,2.72,360,4.654,361,3.763,362,3.221,363,4.456,364,3.221,365,2.72,366,3.221,367,4.456,368,4.456,369,3.221,370,3.221,371,3.221,372,4.456,373,2.39,374,2.39,375,3.221,376,2.39,377,2.72,378,2.72,379,2.72,380,3.221,381,3.221,382,3.221,383,3.221,384,3.221,385,3.221]],["title/modules/RoomModule.html",[64,1.06,74,2.072]],["body/modules/RoomModule.html",[2,1.527,3,0.35,4,0.35,5,0.317,11,0.027,19,0.872,20,0.581,27,0.35,28,0.086,34,0.017,35,0.017,64,1.332,66,1.251,67,1.756,73,2.581,74,4.025,77,2.033,78,1.449,79,1.345,81,2.197,82,2.605,89,1.251,124,2.401,139,2.401,141,2.088,142,2.238,143,1.95,146,1.566,147,2.594,148,1.856,149,1.856,150,2.044,151,1.166,152,1.449,154,1.566,157,2.594,158,2.594,159,2.044,171,2.868,200,2.044,358,3.313,377,2.594,386,3.071,387,3.071,388,3.071,389,3.071,390,3.071]],["title/injectables/RoomService.html",[93,0.863,141,1.215]],["body/injectables/RoomService.html",[3,0.24,4,0.24,5,0.217,7,0.313,8,1.006,11,0.027,15,2.407,16,1.045,18,1.402,19,0.779,20,0.397,27,0.24,28,0.059,30,1.235,32,1.153,34,0.012,35,0.012,42,0.786,46,1.318,49,1.387,50,1.349,51,1.387,88,1.655,93,0.819,94,0.919,114,1.699,119,2.686,141,1.153,143,1.831,154,1.07,167,2.96,168,1.801,169,1.162,170,1.589,173,2.204,175,1.07,176,1.269,177,1.269,178,1.558,179,1.966,180,2.618,181,2.031,184,2.407,185,3.675,195,1.397,207,2.711,213,1.397,214,1.397,215,1.162,219,1.397,220,1.07,221,1.07,222,1.269,226,1.397,237,2.651,239,2.711,282,2.407,307,2.407,308,1.558,318,1.558,320,2.651,321,2.651,326,1.397,360,3.364,361,2.747,365,1.773,376,1.558,391,1.773,392,3.254,393,4.486,394,4.523,395,2.1,396,3.254,397,2.1,398,2.1,399,3.254,400,2.1,401,2.1,402,2.1,403,2.1,404,2.1,405,3.983,406,2.1,407,2.165,408,2.1,409,2.1,410,2.1,411,2.1,412,2.1,413,3.983,414,1.397,415,2.1,416,1.773,417,2.1,418,2.1]],["title/controllers/RoomUserController.html",[0,1.302,419,2.281]],["body/controllers/RoomUserController.html",[0,1.351,2,1.26,3,0.406,4,0.406,5,0.367,7,0.531,8,1.473,10,1.558,11,0.026,16,0.724,18,1.027,19,0.821,20,0.673,21,2.881,22,2.15,23,1.558,27,0.406,28,0.099,29,1.969,30,1.351,31,2.15,32,1.26,34,0.018,35,0.018,42,0.623,49,1.099,50,0.896,51,1.099,88,1.775,89,1.942,106,2.639,120,2.639,123,3.537,141,1.26,142,2.041,151,2.041,152,1.678,153,1.969,234,3.805,235,2.639,378,3.004,379,3.004,414,3.172,419,3.172,420,3.004,421,4.767,422,3.558,423,3.004,424,3.558,425,3.558,426,3.004,427,3.558,428,3.558]],["title/modules/RoomUserModule.html",[64,1.06,75,2.072]],["body/modules/RoomUserModule.html",[2,1.561,3,0.362,4,0.362,5,0.327,11,0.027,19,0.867,20,0.599,27,0.362,28,0.088,34,0.017,35,0.017,64,1.362,66,1.291,67,1.795,75,4.042,77,2.078,78,1.495,79,1.388,81,2.246,88,1.362,89,1.291,124,2.426,139,2.426,141,2.109,142,2.261,143,1.97,146,1.616,149,1.915,151,1.203,152,1.495,153,1.754,154,1.616,170,2.109,171,2.932,175,1.616,200,2.109,419,3.37,429,3.17,430,3.17,431,3.17,432,2.677]],["title/injectables/RoomUserService.html",[93,0.863,142,1.302]],["body/injectables/RoomUserService.html",[3,0.22,4,0.22,5,0.199,7,0.287,8,0.939,11,0.027,15,1.163,16,0.767,18,0.877,19,0.828,20,0.364,27,0.22,28,0.054,30,1.624,32,1.076,34,0.012,35,0.012,42,0.66,49,1.164,50,1.246,51,1.164,88,1.602,89,1.743,93,0.765,94,0.842,113,1.305,114,1.415,119,1.682,139,2.189,141,1.836,142,1.154,143,1.778,149,1.163,151,1.88,153,1.065,154,0.981,167,2.524,168,1.682,169,1.065,170,1.515,173,2.084,175,0.981,179,2.585,180,2.74,181,2.643,184,2.276,185,3.247,188,1.065,189,1.28,190,2.585,195,1.28,213,1.28,214,1.28,215,1.065,218,1.065,219,2.022,220,0.981,221,0.981,222,1.163,226,2.022,234,3.132,237,2.506,238,1.682,239,2.276,282,1.163,287,2.566,321,1.28,357,1.625,407,2.022,414,1.28,426,1.625,433,1.625,434,3.766,435,3.766,436,1.924,437,1.924,438,1.924,439,1.924,440,3.673,441,1.924,442,1.924,443,2.794,444,2.255,445,1.427,446,1.924,447,1.924,448,3.612,449,1.924,450,1.924,451,1.924,452,1.924,453,1.924,454,1.924,455,1.924,456,1.625,457,1.924,458,1.427,459,1.924,460,1.924,461,1.924,462,1.924,463,1.924,464,3.039,465,1.924,466,1.924]],["title/classes/User.html",[28,0.096,113,0.863]],["body/classes/User.html",[3,0.502,4,0.502,5,0.454,7,0.656,11,0.025,16,1.211,27,0.502,28,0.123,34,0.021,35,0.021,37,2.073,39,2.226,42,1.042,46,2.059,113,1.376,114,1.968,207,3.303,238,3.292,458,4.413,467,3.712,468,4.396,469,4.396,470,4.396]],["title/classes/UserAuthDto.html",[28,0.096,110,2.072]],["body/classes/UserAuthDto.html",[3,0.461,4,0.461,5,0.417,7,0.603,10,1.767,11,0.026,16,0.822,19,0.71,23,1.767,27,0.461,28,0.144,34,0.02,35,0.02,37,1.904,39,2.11,42,0.707,46,1.713,110,3.13,113,1.304,114,1.713,188,3.165,249,3.843,263,3.843,271,2.686,274,2.686,286,3.409,288,4.373,289,4.373,290,4.373,291,4.373,292,4.373,294,4.373,471,4.373,472,3.409,473,5.179,474,4.037]],["title/controllers/UserController.html",[0,1.302,475,2.281]],["body/controllers/UserController.html",[0,1.801,2,1.251,3,0.403,4,0.403,5,0.365,7,0.527,8,1.466,10,1.546,11,0.026,16,0.719,18,1.02,19,0.819,20,0.668,21,2.867,22,2.134,23,1.546,27,0.403,28,0.099,29,1.955,30,1.341,31,2.134,32,1.251,34,0.018,35,0.018,42,0.619,49,1.092,50,0.889,51,1.092,88,1.466,113,1.442,120,2.621,123,2.621,143,1.772,152,1.666,218,2.626,245,2.867,279,3.798,423,2.983,475,3.157,476,2.983,477,4.006,478,2.983,479,4.744,480,4.744,481,3.532,482,3.532,483,3.532,484,2.983,485,2.983,486,2.983,487,3.532,488,3.532,489,3.532,490,3.532]],["title/modules/UserModule.html",[64,1.06,76,2.072]],["body/modules/UserModule.html",[2,1.564,3,0.363,4,0.363,5,0.328,11,0.026,19,0.868,20,0.601,27,0.363,28,0.089,34,0.017,35,0.017,64,1.365,66,1.295,67,1.799,73,2.61,76,4.044,77,2.083,78,1.5,79,1.392,81,2.251,82,2.669,89,1.295,124,2.428,139,2.428,141,2.111,142,2.263,143,1.972,145,3.729,146,1.621,149,1.922,150,2.116,151,1.207,152,2.083,153,1.76,200,2.116,432,2.685,475,3.376,491,3.18,492,3.18,493,3.18,494,3.18]],["title/injectables/UserService.html",[93,0.863,143,1.134]],["body/injectables/UserService.html",[3,0.182,4,0.182,5,0.164,7,0.238,8,0.806,11,0.027,16,1.02,18,1.312,19,0.75,20,0.301,27,0.182,28,0.044,30,0.991,32,1.61,34,0.01,35,0.01,39,1.063,42,0.841,46,1.908,49,1.405,50,1.144,51,1.405,88,0.492,89,0.649,93,0.657,94,0.697,113,1.452,114,1.657,119,2.953,142,1.902,143,0.863,151,1.259,152,0.751,167,2.98,168,1.444,169,0.881,170,1.358,173,1.835,175,0.812,176,0.962,177,0.962,178,1.182,179,2.557,180,2.554,181,2.317,184,2.9,185,3.372,186,1.345,188,2.772,189,1.06,192,1.345,213,1.06,214,1.06,215,0.881,216,1.936,218,1.444,219,2.206,220,0.812,221,0.812,222,0.962,226,1.06,228,2.204,232,1.182,238,3.025,239,0.962,279,2.746,282,0.962,317,3.238,318,1.936,320,1.06,321,2.551,407,1.736,414,1.06,416,1.345,440,2.46,443,1.936,444,1.936,445,1.182,456,2.204,458,2.845,477,2.8,478,1.345,484,1.345,485,1.345,486,1.345,495,1.345,496,3.316,497,2.61,498,2.61,499,3.834,500,2.61,501,3.316,502,1.592,503,2.61,504,1.592,505,2.61,506,1.592,507,1.592,508,2.61,509,1.592,510,1.592,511,1.592,512,1.592,513,1.592,514,1.345,515,1.345,516,1.592,517,1.592,518,1.592,519,1.592,520,2.61,521,1.592,522,1.592,523,1.592,524,2.8,525,1.592,526,1.592,527,1.592,528,1.592]],["title/changelog.html",[529,1.915,530,1.915,531,2.877]],["body/changelog.html",[11,0.024,34,0.024,35,0.024]],["title/coverage.html",[532,3.927]],["body/coverage.html",[0,2.059,1,1.808,5,0.28,6,2.294,11,0.026,24,1.504,28,0.163,34,0.015,35,0.015,36,1.808,38,2.294,42,0.476,88,1.22,89,1.608,93,1.506,95,2.294,104,1.808,105,2.294,110,1.642,113,0.994,124,1.107,139,1.107,140,1.642,141,0.962,142,1.031,143,0.899,151,1.766,166,2.294,170,0.962,176,1.642,177,1.642,190,1.642,191,2.294,202,2.294,220,1.385,221,1.385,232,5.038,234,1.642,235,2.016,236,2.294,245,1.642,279,1.642,280,2.294,281,2.294,295,2.294,337,2.294,350,2.294,358,1.808,359,2.294,373,2.016,374,2.016,391,2.294,419,1.808,420,2.294,433,2.294,467,2.294,471,2.294,472,2.294,475,1.808,476,2.294,495,2.294,532,2.294,533,2.294,534,2.717,535,2.717,536,5.659,537,5.84,538,2.294,539,2.717,540,5.659,541,4.652,542,2.294,543,5.424,544,2.294,545,2.717,546,2.717,547,2.717,548,2.717,549,2.294,550,3.334,551,2.294,552,2.294,553,2.294,554,2.294,555,2.294,556,2.717,557,2.717]],["title/dependencies.html",[67,1.676,558,2.43]],["body/dependencies.html",[11,0.027,20,0.716,23,1.659,28,0.139,34,0.019,35,0.019,57,3.2,67,1.544,146,1.932,148,2.29,159,2.521,215,2.097,271,2.521,306,4.684,559,6.115,560,3.789,561,3.789,562,3.789,563,4.971,564,4.198,565,3.789,566,4.971,567,3.789,568,3.789,569,3.789,570,3.789,571,3.789,572,3.789,573,3.789,574,3.789,575,3.789,576,3.789,577,3.789,578,3.2,579,3.789,580,3.789,581,3.789,582,3.789,583,3.789,584,3.789,585,3.789,586,3.789,587,3.789,588,3.789,589,3.789,590,3.789,591,3.789]],["title/miscellaneous/functions.html",[592,1.592,593,3.475]],["body/miscellaneous/functions.html",[7,0.559,11,0.025,18,1.693,34,0.019,35,0.019,42,1.027,46,1.632,49,1.812,50,1.476,51,1.812,53,4.166,176,2.981,177,2.264,220,2.515,221,1.91,407,3.283,542,3.163,544,4.658,549,3.163,550,4.951,551,4.166,552,3.163,553,4.166,554,4.166,555,4.166,592,2.073,593,3.163,594,3.746,595,3.746,596,3.746,597,3.746,598,3.746,599,3.746,600,6.256,601,4.934,602,3.746,603,3.746,604,4.934,605,3.746]],["title/index.html",[7,0.43,529,1.915,530,1.915]],["body/index.html",[11,0.024,34,0.015,35,0.015,100,2.215,578,2.215,606,2.623,607,4.559,608,2.623,609,2.623,610,2.623,611,4.559,612,2.623,613,2.623,614,2.623,615,2.623,616,2.623,617,2.623,618,5.59,619,4.559,620,2.623,621,4.559,622,2.623,623,3.849,624,2.623,625,2.623,626,2.623,627,2.623,628,5.59,629,2.623,630,5.925,631,3.849,632,5.348,633,2.623,634,2.623,635,2.623,636,2.623,637,2.623,638,2.623,639,4.559,640,2.215,641,5.348,642,2.623,643,2.623,644,5.022,645,5.022,646,2.623,647,2.623,648,3.849,649,2.623,650,2.623,651,3.849,652,2.623,653,2.623,654,2.623,655,2.623,656,2.623,657,2.623,658,2.623,659,2.623,660,2.623,661,2.623,662,3.849,663,2.623,664,2.623,665,2.623,666,3.849,667,2.623,668,2.623,669,2.623,670,2.623,671,2.623,672,4.559,673,5.59,674,2.623,675,2.623,676,3.849,677,2.623,678,3.849,679,3.849,680,3.849,681,3.849,682,3.849,683,3.849,684,2.623,685,2.623,686,2.623,687,2.623,688,2.623,689,2.623,690,2.623,691,2.623,692,2.623,693,2.623,694,3.849,695,5.348,696,5.348,697,2.623,698,2.623,699,4.559,700,2.215,701,2.215,702,2.623,703,2.623,704,2.623,705,2.623,706,3.849,707,2.623,708,2.623,709,2.215,710,1.746,711,2.623,712,2.623,713,2.623,714,2.623]],["title/license.html",[529,1.915,530,1.915,710,1.915]],["body/license.html",[11,0.018,34,0.018,35,0.018,79,1.563,533,3.015,564,3.015,640,5.477,700,3.015,701,3.015,709,3.015,710,2.376,715,5.386,716,3.57,717,3.57,718,4.035,719,3.57,720,3.57,721,3.57,722,3.57,723,3.57,724,3.57,725,4.779,726,3.57,727,3.57,728,3.57,729,5.386,730,3.57,731,4.779,732,3.57,733,3.57,734,4.779,735,3.57,736,3.57,737,3.57,738,3.57,739,3.57,740,3.57,741,3.57,742,4.779,743,3.57,744,3.57,745,3.57,746,3.57,747,3.57,748,3.57,749,3.57,750,4.779,751,4.779,752,3.57,753,3.57,754,3.57,755,3.57,756,3.57,757,3.57,758,3.57,759,3.57,760,3.57,761,3.57,762,3.57,763,3.57,764,3.57,765,3.57,766,3.57,767,3.57,768,3.57,769,3.57,770,3.57,771,3.57,772,3.57,773,3.57,774,3.57,775,3.57,776,3.57,777,3.57,778,3.57,779,3.57,780,3.57]],["title/modules.html",[66,1.894]],["body/modules.html",[11,0.021,34,0.021,35,0.021,65,2.991,66,1.831,71,2.717,72,2.717,73,1.968,74,2.717,75,2.717,76,2.717,781,6.647,782,6.647,783,6.647,784,6.647]],["title/overview.html",[785,3.927]],["body/overview.html",[2,0.878,11,0.026,24,2.44,34,0.014,35,0.014,37,1.169,65,4.293,66,1.01,67,1.503,68,2.093,69,2.093,70,2.093,71,3.923,72,3.871,73,2.655,74,3.871,75,3.871,76,3.871,77,1.741,78,1.169,79,1.085,94,1.085,124,2.311,136,2.093,137,2.093,139,2.311,140,2.665,141,2.009,142,2.153,143,1.876,170,2.065,247,2.093,331,2.093,332,2.093,333,2.093,785,2.093,786,3.691,787,2.479]],["title/properties.html",[39,1.676,558,2.43]],["body/properties.html",[11,0.026,34,0.023,35,0.023,39,2.066,274,3.375,710,3.375,788,5.072,789,5.072,790,5.072,791,5.072]],["title/todo.html",[529,1.915,530,1.915,792,2.877]],["body/todo.html",[11,0.024,34,0.024,35,0.024]],["title/miscellaneous/typealiases.html",[592,1.592,793,4.116]],["body/miscellaneous/typealiases.html",[7,0.489,11,0.017,34,0.017,35,0.017,42,1.158,107,3.344,113,1.465,114,1.491,128,3.344,151,2.107,204,3.805,210,3.805,216,3.344,217,2.765,218,2.851,299,5.543,307,2.723,376,3.344,394,3.805,440,3.344,443,3.344,444,3.344,445,3.344,448,3.805,524,3.805,592,1.812,794,3.275,795,5.82,796,4.507,797,4.507,798,5.55,799,6.37,800,3.275,801,4.507,802,4.507,803,6.015,804,4.507,805,4.507,806,4.507,807,4.507,808,3.275,809,3.275,810,3.275,811,4.507,812,3.275]],["title/miscellaneous/variables.html",[592,1.592,813,3.475]],["body/miscellaneous/variables.html",[7,0.653,11,0.026,32,1.55,34,0.021,35,0.021,113,1.102,180,2.779,245,2.644,302,3.695,307,2.644,322,3.695,326,3.95,373,4.044,374,3.247,514,3.695,515,3.695,538,4.602,592,2.422,718,3.695,813,3.695,814,4.376,815,4.376,816,4.376,817,4.376,818,4.376,819,4.376,820,4.376,821,4.376,822,4.376,823,4.376]]],"invertedIndex":[["",{"_index":11,"title":{},"body":{"controllers/AppController.html":{},"classes/AppGateway.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/Card.html":{},"modules/CardModule.html":{},"injectables/CardService.html":{},"classes/CreateRoomAndUserDto.html":{},"classes/JoinUserRoom.html":{},"injectables/JwtStrategy.html":{},"modules/PrismaModule.html":{},"injectables/PrismaService.html":{},"classes/Room.html":{},"controllers/RoomController.html":{},"modules/RoomModule.html":{},"injectables/RoomService.html":{},"controllers/RoomUserController.html":{},"modules/RoomUserModule.html":{},"injectables/RoomUserService.html":{},"classes/User.html":{},"classes/UserAuthDto.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"changelog.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"license.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"todo.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["0",{"_index":232,"title":{},"body":{"injectables/CardService.html":{},"injectables/UserService.html":{},"coverage.html":{}}}],["0.0.1",{"_index":789,"title":{},"body":{"properties.html":{}}}],["0.1.13",{"_index":582,"title":{},"body":{"dependencies.html":{}}}],["0.13.2",{"_index":575,"title":{},"body":{"dependencies.html":{}}}],["0.5.1",{"_index":574,"title":{},"body":{"dependencies.html":{}}}],["0.6.0",{"_index":576,"title":{},"body":{"dependencies.html":{}}}],["0/1",{"_index":540,"title":{},"body":{"coverage.html":{}}}],["0/2",{"_index":536,"title":{},"body":{"coverage.html":{}}}],["0/3",{"_index":537,"title":{},"body":{"coverage.html":{}}}],["0/4",{"_index":541,"title":{},"body":{"coverage.html":{}}}],["0/5",{"_index":545,"title":{},"body":{"coverage.html":{}}}],["0/6",{"_index":546,"title":{},"body":{"coverage.html":{}}}],["0/7",{"_index":547,"title":{},"body":{"coverage.html":{}}}],["0/9",{"_index":548,"title":{},"body":{"coverage.html":{}}}],["1",{"_index":260,"title":{},"body":{"classes/CreateRoomAndUserDto.html":{}}}],["1.0.0",{"_index":579,"title":{},"body":{"dependencies.html":{}}}],["10",{"_index":248,"title":{},"body":{"classes/CreateRoomAndUserDto.html":{}}}],["2.1.0",{"_index":568,"title":{},"body":{"dependencies.html":{}}}],["2022",{"_index":717,"title":{},"body":{"license.html":{}}}],["24h",{"_index":165,"title":{},"body":{"modules/AuthModule.html":{}}}],["3",{"_index":261,"title":{},"body":{"classes/CreateRoomAndUserDto.html":{}}}],["3.0.2",{"_index":584,"title":{},"body":{"dependencies.html":{}}}],["4.0.0",{"_index":577,"title":{},"body":{"dependencies.html":{}}}],["4.1.1",{"_index":570,"title":{},"body":{"dependencies.html":{}}}],["4.5.0",{"_index":589,"title":{},"body":{"dependencies.html":{}}}],["4964",{"_index":290,"title":{},"body":{"classes/JoinUserRoom.html":{},"classes/UserAuthDto.html":{}}}],["5",{"_index":247,"title":{},"body":{"classes/CreateRoomAndUserDto.html":{},"overview.html":{}}}],["5.0.1",{"_index":572,"title":{},"body":{"dependencies.html":{}}}],["5.74.0",{"_index":591,"title":{},"body":{"dependencies.html":{}}}],["50",{"_index":273,"title":{},"body":{"classes/CreateRoomAndUserDto.html":{}}}],["50)@apiproperty({description",{"_index":252,"title":{},"body":{"classes/CreateRoomAndUserDto.html":{}}}],["521f",{"_index":289,"title":{},"body":{"classes/JoinUserRoom.html":{},"classes/UserAuthDto.html":{}}}],["6.0.5",{"_index":569,"title":{},"body":{"dependencies.html":{}}}],["7",{"_index":786,"title":{},"body":{"overview.html":{}}}],["7.2.0",{"_index":586,"title":{},"body":{"dependencies.html":{}}}],["8",{"_index":787,"title":{},"body":{"overview.html":{}}}],["9.0.0",{"_index":559,"title":{},"body":{"dependencies.html":{}}}],["9.0.8",{"_index":566,"title":{},"body":{"dependencies.html":{}}}],["945d",{"_index":291,"title":{},"body":{"classes/JoinUserRoom.html":{},"classes/UserAuthDto.html":{}}}],["_",{"_index":816,"title":{},"body":{"miscellaneous/variables.html":{}}}],["a6f60f34387f",{"_index":292,"title":{},"body":{"classes/JoinUserRoom.html":{},"classes/UserAuthDto.html":{}}}],["above",{"_index":749,"title":{},"body":{"license.html":{}}}],["access",{"_index":822,"title":{},"body":{"miscellaneous/variables.html":{}}}],["action",{"_index":774,"title":{},"body":{"license.html":{}}}],["admin.util.ts",{"_index":553,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["aliases",{"_index":794,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["allnumbersdrawn",{"_index":405,"title":{},"body":{"injectables/RoomService.html":{}}}],["allnumbersdrawn.length",{"_index":415,"title":{},"body":{"injectables/RoomService.html":{}}}],["ambiente",{"_index":653,"title":{},"body":{"index.html":{}}}],["analise",{"_index":677,"title":{},"body":{"index.html":{}}}],["and/or",{"_index":740,"title":{},"body":{"license.html":{}}}],["api",{"_index":103,"title":{},"body":{"injectables/AppService.html":{}}}],["apibearerauth",{"_index":372,"title":{},"body":{"controllers/RoomController.html":{}}}],["apioperation",{"_index":21,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/RoomController.html":{},"controllers/RoomUserController.html":{},"controllers/UserController.html":{}}}],["apioperation({summary",{"_index":423,"title":{},"body":{"controllers/RoomUserController.html":{},"controllers/UserController.html":{}}}],["apiproperty",{"_index":263,"title":{},"body":{"classes/CreateRoomAndUserDto.html":{},"classes/JoinUserRoom.html":{},"classes/UserAuthDto.html":{}}}],["apitags",{"_index":22,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/RoomController.html":{},"controllers/RoomUserController.html":{},"controllers/UserController.html":{}}}],["apitags('auth",{"_index":131,"title":{},"body":{"controllers/AuthController.html":{}}}],["apitags('room",{"_index":378,"title":{},"body":{"controllers/RoomController.html":{},"controllers/RoomUserController.html":{}}}],["apitags('status",{"_index":26,"title":{},"body":{"controllers/AppController.html":{}}}],["apitags('user",{"_index":487,"title":{},"body":{"controllers/UserController.html":{}}}],["app",{"_index":344,"title":{},"body":{"injectables/PrismaService.html":{}}}],["app.close",{"_index":349,"title":{},"body":{"injectables/PrismaService.html":{}}}],["app.controller",{"_index":83,"title":{},"body":{"modules/AppModule.html":{}}}],["app.gateway",{"_index":84,"title":{},"body":{"modules/AppModule.html":{}}}],["app.service",{"_index":25,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{}}}],["appcontroller",{"_index":1,"title":{"controllers/AppController.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"coverage.html":{}}}],["appgateway",{"_index":36,"title":{"classes/AppGateway.html":{}},"body":{"classes/AppGateway.html":{},"modules/AppModule.html":{},"coverage.html":{}}}],["application",{"_index":14,"title":{},"body":{"controllers/AppController.html":{}}}],["appmodule",{"_index":65,"title":{"modules/AppModule.html":{}},"body":{"modules/AppModule.html":{},"modules.html":{},"overview.html":{}}}],["appservice",{"_index":24,"title":{"injectables/AppService.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"coverage.html":{},"overview.html":{}}}],["aqui",{"_index":613,"title":{},"body":{"index.html":{}}}],["arising",{"_index":778,"title":{},"body":{"license.html":{}}}],["arquivo",{"_index":712,"title":{},"body":{"index.html":{}}}],["associated",{"_index":726,"title":{},"body":{"license.html":{}}}],["async",{"_index":167,"title":{},"body":{"injectables/AuthService.html":{},"injectables/CardService.html":{},"injectables/JwtStrategy.html":{},"injectables/PrismaService.html":{},"injectables/RoomService.html":{},"injectables/RoomUserService.html":{},"injectables/UserService.html":{}}}],["auth",{"_index":107,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"miscellaneous/typealiases.html":{}}}],["auth.controller",{"_index":155,"title":{},"body":{"modules/AuthModule.html":{}}}],["auth.dto",{"_index":127,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["auth.dto.ts",{"_index":472,"title":{},"body":{"classes/UserAuthDto.html":{},"coverage.html":{}}}],["auth.dto.ts:10",{"_index":474,"title":{},"body":{"classes/UserAuthDto.html":{}}}],["auth.service",{"_index":125,"title":{},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{}}}],["auth.type",{"_index":308,"title":{},"body":{"injectables/JwtStrategy.html":{},"controllers/RoomController.html":{},"injectables/RoomService.html":{}}}],["auth.type.ts",{"_index":806,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["auth/auth.module",{"_index":85,"title":{},"body":{"modules/AppModule.html":{}}}],["authcontroller",{"_index":104,"title":{"controllers/AuthController.html":{}},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"coverage.html":{}}}],["authenticateduser",{"_index":373,"title":{},"body":{"controllers/RoomController.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["authenticating",{"_index":473,"title":{},"body":{"classes/UserAuthDto.html":{}}}],["authguard",{"_index":371,"title":{},"body":{"controllers/RoomController.html":{}}}],["authmodule",{"_index":71,"title":{"modules/AuthModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules.html":{},"overview.html":{}}}],["author",{"_index":791,"title":{},"body":{"properties.html":{}}}],["authorized",{"_index":325,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["authors",{"_index":767,"title":{},"body":{"license.html":{}}}],["authservice",{"_index":124,"title":{"injectables/AuthService.html":{}},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"modules/CardModule.html":{},"modules/RoomModule.html":{},"modules/RoomUserModule.html":{},"modules/UserModule.html":{},"coverage.html":{},"overview.html":{}}}],["authuser",{"_index":108,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["authuser(@body",{"_index":134,"title":{},"body":{"controllers/AuthController.html":{}}}],["authuser(userauthdto",{"_index":109,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["authuserresponse",{"_index":128,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"miscellaneous/typealiases.html":{}}}],["automatizados",{"_index":675,"title":{},"body":{"index.html":{}}}],["autores",{"_index":691,"title":{},"body":{"index.html":{}}}],["await",{"_index":181,"title":{},"body":{"injectables/AuthService.html":{},"injectables/CardService.html":{},"injectables/JwtStrategy.html":{},"injectables/PrismaService.html":{},"injectables/RoomService.html":{},"injectables/RoomUserService.html":{},"injectables/UserService.html":{}}}],["back",{"_index":699,"title":{},"body":{"index.html":{}}}],["ball",{"_index":246,"title":{},"body":{"classes/CreateRoomAndUserDto.html":{}}}],["balltime",{"_index":237,"title":{},"body":{"classes/CreateRoomAndUserDto.html":{},"classes/Room.html":{},"injectables/RoomService.html":{},"injectables/RoomUserService.html":{}}}],["baseurl",{"_index":98,"title":{},"body":{"injectables/AppService.html":{}}}],["bcrypt",{"_index":571,"title":{},"body":{"dependencies.html":{}}}],["bingo",{"_index":100,"title":{},"body":{"injectables/AppService.html":{},"index.html":{}}}],["body",{"_index":120,"title":{},"body":{"controllers/AuthController.html":{},"controllers/RoomUserController.html":{},"controllers/UserController.html":{}}}],["boolean",{"_index":354,"title":{},"body":{"classes/Room.html":{}}}],["bootstrap",{"_index":544,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["bound",{"_index":368,"title":{},"body":{"controllers/RoomController.html":{}}}],["browse",{"_index":784,"title":{},"body":{"modules.html":{}}}],["browser",{"_index":781,"title":{},"body":{"modules.html":{}}}],["c",{"_index":716,"title":{},"body":{"license.html":{}}}],["card",{"_index":190,"title":{"classes/Card.html":{}},"body":{"classes/Card.html":{},"injectables/CardService.html":{},"injectables/RoomUserService.html":{},"coverage.html":{}}}],["card.service",{"_index":201,"title":{},"body":{"modules/CardModule.html":{}}}],["card.type",{"_index":225,"title":{},"body":{"injectables/CardService.html":{}}}],["card.type.ts",{"_index":798,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["card/card.module",{"_index":86,"title":{},"body":{"modules/AppModule.html":{}}}],["cardmodule",{"_index":72,"title":{"modules/CardModule.html":{}},"body":{"modules/AppModule.html":{},"modules/CardModule.html":{},"modules.html":{},"overview.html":{}}}],["cards",{"_index":218,"title":{},"body":{"injectables/CardService.html":{},"classes/CreateRoomAndUserDto.html":{},"injectables/RoomUserService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"miscellaneous/typealiases.html":{}}}],["cards.type",{"_index":450,"title":{},"body":{"injectables/RoomUserService.html":{}}}],["cards.type.ts",{"_index":803,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["cardservice",{"_index":139,"title":{"injectables/CardService.html":{}},"body":{"modules/AuthModule.html":{},"modules/CardModule.html":{},"injectables/CardService.html":{},"modules/RoomModule.html":{},"modules/RoomUserModule.html":{},"injectables/RoomUserService.html":{},"modules/UserModule.html":{},"coverage.html":{},"overview.html":{}}}],["cardsgenerator",{"_index":203,"title":{},"body":{"injectables/CardService.html":{}}}],["cardsgenerator(numberofusercards",{"_index":206,"title":{},"body":{"injectables/CardService.html":{}}}],["catch(servererror",{"_index":321,"title":{},"body":{"injectables/JwtStrategy.html":{},"injectables/RoomService.html":{},"injectables/RoomUserService.html":{},"injectables/UserService.html":{}}}],["changelog",{"_index":531,"title":{"changelog.html":{}},"body":{}}],["charge",{"_index":722,"title":{},"body":{"license.html":{}}}],["checkifthereisaroom",{"_index":392,"title":{},"body":{"injectables/RoomService.html":{}}}],["checkifthereisaroom(roomid",{"_index":396,"title":{},"body":{"injectables/RoomService.html":{}}}],["claim",{"_index":770,"title":{},"body":{"license.html":{}}}],["class",{"_index":28,"title":{"classes/AppGateway.html":{},"classes/Card.html":{},"classes/CreateRoomAndUserDto.html":{},"classes/JoinUserRoom.html":{},"classes/Room.html":{},"classes/User.html":{},"classes/UserAuthDto.html":{}},"body":{"controllers/AppController.html":{},"classes/AppGateway.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/Card.html":{},"modules/CardModule.html":{},"injectables/CardService.html":{},"classes/CreateRoomAndUserDto.html":{},"classes/JoinUserRoom.html":{},"injectables/JwtStrategy.html":{},"modules/PrismaModule.html":{},"injectables/PrismaService.html":{},"classes/Room.html":{},"controllers/RoomController.html":{},"modules/RoomModule.html":{},"injectables/RoomService.html":{},"controllers/RoomUserController.html":{},"modules/RoomUserModule.html":{},"injectables/RoomUserService.html":{},"classes/User.html":{},"classes/UserAuthDto.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"coverage.html":{},"dependencies.html":{}}}],["classes",{"_index":37,"title":{},"body":{"classes/AppGateway.html":{},"classes/Card.html":{},"classes/CreateRoomAndUserDto.html":{},"classes/JoinUserRoom.html":{},"classes/Room.html":{},"classes/User.html":{},"classes/UserAuthDto.html":{},"overview.html":{}}}],["cluster_appmodule",{"_index":68,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_imports",{"_index":69,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_providers",{"_index":70,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_authmodule",{"_index":136,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_authmodule_imports",{"_index":138,"title":{},"body":{"modules/AuthModule.html":{}}}],["cluster_authmodule_providers",{"_index":137,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_cardmodule",{"_index":196,"title":{},"body":{"modules/CardModule.html":{}}}],["cluster_cardmodule_imports",{"_index":197,"title":{},"body":{"modules/CardModule.html":{}}}],["cluster_cardmodule_providers",{"_index":198,"title":{},"body":{"modules/CardModule.html":{}}}],["cluster_prismamodule",{"_index":331,"title":{},"body":{"modules/PrismaModule.html":{},"overview.html":{}}}],["cluster_prismamodule_exports",{"_index":333,"title":{},"body":{"modules/PrismaModule.html":{},"overview.html":{}}}],["cluster_prismamodule_providers",{"_index":332,"title":{},"body":{"modules/PrismaModule.html":{},"overview.html":{}}}],["cluster_roommodule",{"_index":386,"title":{},"body":{"modules/RoomModule.html":{}}}],["cluster_roommodule_imports",{"_index":387,"title":{},"body":{"modules/RoomModule.html":{}}}],["cluster_roommodule_providers",{"_index":388,"title":{},"body":{"modules/RoomModule.html":{}}}],["cluster_roomusermodule",{"_index":429,"title":{},"body":{"modules/RoomUserModule.html":{}}}],["cluster_roomusermodule_providers",{"_index":430,"title":{},"body":{"modules/RoomUserModule.html":{}}}],["cluster_usermodule",{"_index":491,"title":{},"body":{"modules/UserModule.html":{}}}],["cluster_usermodule_imports",{"_index":492,"title":{},"body":{"modules/UserModule.html":{}}}],["cluster_usermodule_providers",{"_index":493,"title":{},"body":{"modules/UserModule.html":{}}}],["codificação",{"_index":685,"title":{},"body":{"index.html":{}}}],["coisas",{"_index":636,"title":{},"body":{"index.html":{}}}],["colletter.length",{"_index":233,"title":{},"body":{"injectables/CardService.html":{}}}],["com",{"_index":662,"title":{},"body":{"index.html":{}}}],["começando",{"_index":614,"title":{},"body":{"index.html":{}}}],["como",{"_index":641,"title":{},"body":{"index.html":{}}}],["conditions",{"_index":748,"title":{},"body":{"license.html":{}}}],["connect",{"_index":287,"title":{},"body":{"classes/JoinUserRoom.html":{},"injectables/RoomUserService.html":{}}}],["connected",{"_index":445,"title":{},"body":{"injectables/RoomUserService.html":{},"injectables/UserService.html":{},"miscellaneous/typealiases.html":{}}}],["connection",{"_index":779,"title":{},"body":{"license.html":{}}}],["console.log(message",{"_index":62,"title":{},"body":{"classes/AppGateway.html":{}}}],["const",{"_index":180,"title":{},"body":{"injectables/AuthService.html":{},"injectables/CardService.html":{},"injectables/JwtStrategy.html":{},"injectables/RoomService.html":{},"injectables/RoomUserService.html":{},"injectables/UserService.html":{},"miscellaneous/variables.html":{}}}],["constructor",{"_index":168,"title":{},"body":{"injectables/AuthService.html":{},"injectables/CardService.html":{},"injectables/JwtStrategy.html":{},"injectables/RoomService.html":{},"injectables/RoomUserService.html":{},"injectables/UserService.html":{}}}],["constructor(prisma",{"_index":169,"title":{},"body":{"injectables/AuthService.html":{},"injectables/CardService.html":{},"injectables/JwtStrategy.html":{},"injectables/RoomService.html":{},"injectables/RoomUserService.html":{},"injectables/UserService.html":{}}}],["constructor(private",{"_index":29,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"injectables/JwtStrategy.html":{},"controllers/RoomController.html":{},"controllers/RoomUserController.html":{},"controllers/UserController.html":{}}}],["construído",{"_index":686,"title":{},"body":{"index.html":{}}}],["contract",{"_index":775,"title":{},"body":{"license.html":{}}}],["controller",{"_index":0,"title":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/RoomController.html":{},"controllers/RoomUserController.html":{},"controllers/UserController.html":{}},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/RoomController.html":{},"controllers/RoomUserController.html":{},"controllers/UserController.html":{},"coverage.html":{}}}],["controller('/room",{"_index":379,"title":{},"body":{"controllers/RoomController.html":{},"controllers/RoomUserController.html":{}}}],["controller('auth",{"_index":132,"title":{},"body":{"controllers/AuthController.html":{}}}],["controllers",{"_index":2,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"modules/CardModule.html":{},"controllers/RoomController.html":{},"modules/RoomModule.html":{},"controllers/RoomUserController.html":{},"modules/RoomUserModule.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"overview.html":{}}}],["convidado",{"_index":528,"title":{},"body":{"injectables/UserService.html":{}}}],["copies",{"_index":742,"title":{},"body":{"license.html":{}}}],["copy",{"_index":725,"title":{},"body":{"license.html":{}}}],["copyright",{"_index":715,"title":{},"body":{"license.html":{}}}],["cors",{"_index":60,"title":{},"body":{"classes/AppGateway.html":{}}}],["couto",{"_index":693,"title":{},"body":{"index.html":{}}}],["coverage",{"_index":532,"title":{"coverage.html":{}},"body":{"coverage.html":{}}}],["create",{"_index":414,"title":{},"body":{"injectables/RoomService.html":{},"controllers/RoomUserController.html":{},"injectables/RoomUserService.html":{},"injectables/UserService.html":{}}}],["createallnumbersdrawn",{"_index":393,"title":{},"body":{"injectables/RoomService.html":{}}}],["createcard",{"_index":204,"title":{},"body":{"injectables/CardService.html":{},"miscellaneous/typealiases.html":{}}}],["createcard(userid",{"_index":211,"title":{},"body":{"injectables/CardService.html":{}}}],["created",{"_index":480,"title":{},"body":{"controllers/UserController.html":{}}}],["createguestnicknameforuser",{"_index":497,"title":{},"body":{"injectables/UserService.html":{}}}],["createguestnicknameforuser(nickname",{"_index":503,"title":{},"body":{"injectables/UserService.html":{}}}],["createparamdecorator",{"_index":815,"title":{},"body":{"miscellaneous/variables.html":{}}}],["createroom",{"_index":394,"title":{},"body":{"injectables/RoomService.html":{},"miscellaneous/typealiases.html":{}}}],["createroom(createroom",{"_index":399,"title":{},"body":{"injectables/RoomService.html":{}}}],["createroom.balltime",{"_index":411,"title":{},"body":{"injectables/RoomService.html":{}}}],["createroom.name",{"_index":409,"title":{},"body":{"injectables/RoomService.html":{}}}],["createroom.usercards",{"_index":412,"title":{},"body":{"injectables/RoomService.html":{}}}],["createroomanduserandrelatethem",{"_index":434,"title":{},"body":{"injectables/RoomUserService.html":{}}}],["createroomanduserandrelatethem(createroomanduserdto",{"_index":437,"title":{},"body":{"injectables/RoomUserService.html":{}}}],["createroomanduserdto",{"_index":234,"title":{"classes/CreateRoomAndUserDto.html":{}},"body":{"classes/CreateRoomAndUserDto.html":{},"controllers/RoomUserController.html":{},"injectables/RoomUserService.html":{},"coverage.html":{}}}],["createroomanduserhost",{"_index":421,"title":{},"body":{"controllers/RoomUserController.html":{}}}],["createroomanduserhost(@body",{"_index":427,"title":{},"body":{"controllers/RoomUserController.html":{}}}],["createroomanduserhost(createroomanduserdto",{"_index":422,"title":{},"body":{"controllers/RoomUserController.html":{}}}],["createuser",{"_index":498,"title":{},"body":{"injectables/UserService.html":{}}}],["createuser(nickname",{"_index":505,"title":{},"body":{"injectables/UserService.html":{}}}],["creator",{"_index":256,"title":{},"body":{"classes/CreateRoomAndUserDto.html":{}}}],["ctx",{"_index":817,"title":{},"body":{"miscellaneous/variables.html":{}}}],["ctx.switchtohttp().getrequest",{"_index":820,"title":{},"body":{"miscellaneous/variables.html":{}}}],["cópia",{"_index":622,"title":{},"body":{"index.html":{}}}],["da",{"_index":609,"title":{},"body":{"index.html":{}}}],["dados",{"_index":665,"title":{},"body":{"index.html":{}}}],["damages",{"_index":771,"title":{},"body":{"license.html":{}}}],["dar",{"_index":644,"title":{},"body":{"index.html":{}}}],["data",{"_index":407,"title":{},"body":{"injectables/RoomService.html":{},"injectables/RoomUserService.html":{},"injectables/UserService.html":{},"miscellaneous/functions.html":{}}}],["de",{"_index":630,"title":{},"body":{"index.html":{}}}],["deal",{"_index":728,"title":{},"body":{"license.html":{}}}],["dealings",{"_index":780,"title":{},"body":{"license.html":{}}}],["decorators",{"_index":10,"title":{},"body":{"controllers/AppController.html":{},"classes/AppGateway.html":{},"controllers/AuthController.html":{},"classes/CreateRoomAndUserDto.html":{},"classes/JoinUserRoom.html":{},"controllers/RoomController.html":{},"controllers/RoomUserController.html":{},"classes/UserAuthDto.html":{},"controllers/UserController.html":{}}}],["default",{"_index":514,"title":{},"body":{"injectables/UserService.html":{},"miscellaneous/variables.html":{}}}],["defaultstrategy",{"_index":158,"title":{},"body":{"modules/AuthModule.html":{},"modules/RoomModule.html":{}}}],["defined",{"_index":16,"title":{},"body":{"controllers/AppController.html":{},"classes/AppGateway.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/Card.html":{},"injectables/CardService.html":{},"classes/CreateRoomAndUserDto.html":{},"classes/JoinUserRoom.html":{},"injectables/JwtStrategy.html":{},"injectables/PrismaService.html":{},"classes/Room.html":{},"controllers/RoomController.html":{},"injectables/RoomService.html":{},"controllers/RoomUserController.html":{},"injectables/RoomUserService.html":{},"classes/User.html":{},"classes/UserAuthDto.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["demonstração",{"_index":670,"title":{},"body":{"index.html":{}}}],["dependencies",{"_index":67,"title":{"dependencies.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CardModule.html":{},"modules/PrismaModule.html":{},"modules/RoomModule.html":{},"modules/RoomUserModule.html":{},"modules/UserModule.html":{},"dependencies.html":{},"overview.html":{}}}],["description",{"_index":274,"title":{},"body":{"classes/CreateRoomAndUserDto.html":{},"classes/JoinUserRoom.html":{},"classes/UserAuthDto.html":{},"properties.html":{}}}],["descrição",{"_index":610,"title":{},"body":{"index.html":{}}}],["desenvolvimento",{"_index":631,"title":{},"body":{"index.html":{}}}],["detalhes",{"_index":714,"title":{},"body":{"index.html":{}}}],["deve",{"_index":650,"title":{},"body":{"index.html":{}}}],["diga",{"_index":655,"title":{},"body":{"index.html":{}}}],["distribute",{"_index":738,"title":{},"body":{"license.html":{}}}],["doce",{"_index":284,"title":{},"body":{"classes/JoinUserRoom.html":{}}}],["docs",{"_index":99,"title":{},"body":{"injectables/AppService.html":{}}}],["documentation",{"_index":533,"title":{},"body":{"coverage.html":{},"license.html":{}}}],["drawnnumbers",{"_index":410,"title":{},"body":{"injectables/RoomService.html":{}}}],["dto/create",{"_index":447,"title":{},"body":{"injectables/RoomUserService.html":{}}}],["dto/join",{"_index":484,"title":{},"body":{"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["dto/user",{"_index":126,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["e",{"_index":632,"title":{},"body":{"index.html":{}}}],["each",{"_index":244,"title":{},"body":{"classes/CreateRoomAndUserDto.html":{}}}],["eles",{"_index":680,"title":{},"body":{"index.html":{}}}],["em",{"_index":623,"title":{},"body":{"index.html":{}}}],["enableshutdownhooks",{"_index":339,"title":{},"body":{"injectables/PrismaService.html":{}}}],["enableshutdownhooks(app",{"_index":341,"title":{},"body":{"injectables/PrismaService.html":{}}}],["end",{"_index":695,"title":{},"body":{"index.html":{}}}],["entities/card.entity",{"_index":223,"title":{},"body":{"injectables/CardService.html":{}}}],["entities/room.entity",{"_index":403,"title":{},"body":{"injectables/RoomService.html":{}}}],["entities/user.entity",{"_index":486,"title":{},"body":{"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["error",{"_index":600,"title":{},"body":{"miscellaneous/functions.html":{}}}],["error.util",{"_index":222,"title":{},"body":{"injectables/CardService.html":{},"injectables/JwtStrategy.html":{},"injectables/RoomService.html":{},"injectables/RoomUserService.html":{},"injectables/UserService.html":{}}}],["error.util.ts",{"_index":550,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["essa",{"_index":656,"title":{},"body":{"index.html":{}}}],["essas",{"_index":615,"title":{},"body":{"index.html":{}}}],["esses",{"_index":682,"title":{},"body":{"index.html":{}}}],["est",{"_index":707,"title":{},"body":{"index.html":{}}}],["este",{"_index":676,"title":{},"body":{"index.html":{}}}],["estilo",{"_index":684,"title":{},"body":{"index.html":{}}}],["etapa",{"_index":657,"title":{},"body":{"index.html":{}}}],["event",{"_index":766,"title":{},"body":{"license.html":{}}}],["example",{"_index":249,"title":{},"body":{"classes/CreateRoomAndUserDto.html":{},"classes/JoinUserRoom.html":{},"classes/UserAuthDto.html":{}}}],["executando",{"_index":671,"title":{},"body":{"index.html":{}}}],["executar",{"_index":651,"title":{},"body":{"index.html":{}}}],["executioncontext",{"_index":818,"title":{},"body":{"miscellaneous/variables.html":{}}}],["execução",{"_index":654,"title":{},"body":{"index.html":{}}}],["exemplo",{"_index":663,"title":{},"body":{"index.html":{}}}],["exemplos",{"_index":645,"title":{},"body":{"index.html":{}}}],["exemplose",{"_index":659,"title":{},"body":{"index.html":{}}}],["expiresin",{"_index":164,"title":{},"body":{"modules/AuthModule.html":{}}}],["explicar",{"_index":674,"title":{},"body":{"index.html":{}}}],["explique",{"_index":679,"title":{},"body":{"index.html":{}}}],["export",{"_index":27,"title":{},"body":{"controllers/AppController.html":{},"classes/AppGateway.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/Card.html":{},"modules/CardModule.html":{},"injectables/CardService.html":{},"classes/CreateRoomAndUserDto.html":{},"classes/JoinUserRoom.html":{},"injectables/JwtStrategy.html":{},"modules/PrismaModule.html":{},"injectables/PrismaService.html":{},"classes/Room.html":{},"controllers/RoomController.html":{},"modules/RoomModule.html":{},"injectables/RoomService.html":{},"controllers/RoomUserController.html":{},"modules/RoomUserModule.html":{},"injectables/RoomUserService.html":{},"classes/User.html":{},"classes/UserAuthDto.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{}}}],["exports",{"_index":335,"title":{},"body":{"modules/PrismaModule.html":{}}}],["express",{"_index":564,"title":{},"body":{"dependencies.html":{},"license.html":{}}}],["extends",{"_index":309,"title":{},"body":{"injectables/JwtStrategy.html":{},"injectables/PrismaService.html":{}}}],["extractjwt",{"_index":304,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["extractjwt.fromauthheaderasbearertoken",{"_index":313,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["fa20725e",{"_index":288,"title":{},"body":{"classes/JoinUserRoom.html":{},"classes/UserAuthDto.html":{}}}],["false",{"_index":315,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["fetches",{"_index":367,"title":{},"body":{"controllers/RoomController.html":{}}}],["file",{"_index":5,"title":{},"body":{"controllers/AppController.html":{},"classes/AppGateway.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/Card.html":{},"modules/CardModule.html":{},"injectables/CardService.html":{},"classes/CreateRoomAndUserDto.html":{},"classes/JoinUserRoom.html":{},"injectables/JwtStrategy.html":{},"modules/PrismaModule.html":{},"injectables/PrismaService.html":{},"classes/Room.html":{},"controllers/RoomController.html":{},"modules/RoomModule.html":{},"injectables/RoomService.html":{},"controllers/RoomUserController.html":{},"modules/RoomUserModule.html":{},"injectables/RoomUserService.html":{},"classes/User.html":{},"classes/UserAuthDto.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"coverage.html":{}}}],["files",{"_index":727,"title":{},"body":{"license.html":{}}}],["finalizartermine",{"_index":661,"title":{},"body":{"index.html":{}}}],["findallrooms",{"_index":360,"title":{},"body":{"controllers/RoomController.html":{},"injectables/RoomService.html":{}}}],["findallusers",{"_index":499,"title":{},"body":{"injectables/UserService.html":{}}}],["findmany",{"_index":416,"title":{},"body":{"injectables/RoomService.html":{},"injectables/UserService.html":{}}}],["findsingleroom",{"_index":361,"title":{},"body":{"controllers/RoomController.html":{},"injectables/RoomService.html":{}}}],["findsingleroom(@authenticateduser",{"_index":382,"title":{},"body":{"controllers/RoomController.html":{}}}],["findsingleroom(userandroom",{"_index":365,"title":{},"body":{"controllers/RoomController.html":{},"injectables/RoomService.html":{}}}],["findsingleuser",{"_index":500,"title":{},"body":{"injectables/UserService.html":{}}}],["findsingleuser(userid",{"_index":508,"title":{},"body":{"injectables/UserService.html":{}}}],["findunique",{"_index":318,"title":{},"body":{"injectables/JwtStrategy.html":{},"injectables/RoomService.html":{},"injectables/UserService.html":{}}}],["fins",{"_index":629,"title":{},"body":{"index.html":{}}}],["fitness",{"_index":762,"title":{},"body":{"license.html":{}}}],["following",{"_index":747,"title":{},"body":{"license.html":{}}}],["forwardref",{"_index":213,"title":{},"body":{"injectables/CardService.html":{},"injectables/RoomService.html":{},"injectables/RoomUserService.html":{},"injectables/UserService.html":{}}}],["found",{"_index":324,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["found.util",{"_index":178,"title":{},"body":{"injectables/AuthService.html":{},"injectables/RoomService.html":{},"injectables/UserService.html":{}}}],["found.util.ts",{"_index":555,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["free",{"_index":721,"title":{},"body":{"license.html":{}}}],["front",{"_index":694,"title":{},"body":{"index.html":{}}}],["function",{"_index":543,"title":{},"body":{"coverage.html":{}}}],["functions",{"_index":593,"title":{"miscellaneous/functions.html":{}},"body":{"miscellaneous/functions.html":{}}}],["furnished",{"_index":745,"title":{},"body":{"license.html":{}}}],["g5",{"_index":606,"title":{},"body":{"index.html":{}}}],["generate",{"_index":115,"title":{},"body":{"controllers/AuthController.html":{}}}],["generatedcard",{"_index":210,"title":{},"body":{"injectables/CardService.html":{},"miscellaneous/typealiases.html":{}}}],["generatedcards",{"_index":230,"title":{},"body":{"injectables/CardService.html":{}}}],["get('/all",{"_index":384,"title":{},"body":{"controllers/RoomController.html":{}}}],["get('/all')@apioperation({summary",{"_index":362,"title":{},"body":{"controllers/RoomController.html":{}}}],["get('/single",{"_index":380,"title":{},"body":{"controllers/RoomController.html":{}}}],["get('/single')@useguards(undefined)@apibearerauth()@apioperation({summary",{"_index":366,"title":{},"body":{"controllers/RoomController.html":{}}}],["get()@apioperation({summary",{"_index":12,"title":{},"body":{"controllers/AppController.html":{}}}],["getstatus",{"_index":9,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{}}}],["getstatus(baseurl",{"_index":96,"title":{},"body":{"injectables/AppService.html":{}}}],["getting",{"_index":529,"title":{"changelog.html":{},"index.html":{},"license.html":{},"todo.html":{}},"body":{}}],["github",{"_index":696,"title":{},"body":{"index.html":{}}}],["granted",{"_index":720,"title":{},"body":{"license.html":{}}}],["grupo",{"_index":253,"title":{},"body":{"classes/CreateRoomAndUserDto.html":{}}}],["handleerror",{"_index":551,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["handleerror(error",{"_index":599,"title":{},"body":{"miscellaneous/functions.html":{}}}],["handlemessage",{"_index":41,"title":{},"body":{"classes/AppGateway.html":{}}}],["handlemessage(@messagebody",{"_index":61,"title":{},"body":{"classes/AppGateway.html":{}}}],["handlemessage(message",{"_index":45,"title":{},"body":{"classes/AppGateway.html":{}}}],["hereby",{"_index":719,"title":{},"body":{"license.html":{}}}],["him'})@post('/join",{"_index":481,"title":{},"body":{"controllers/UserController.html":{}}}],["holders",{"_index":768,"title":{},"body":{"license.html":{}}}],["http",{"_index":58,"title":{},"body":{"classes/AppGateway.html":{}}}],["httpcode",{"_index":121,"title":{},"body":{"controllers/AuthController.html":{}}}],["httpcode(httpstatus.ok",{"_index":133,"title":{},"body":{"controllers/AuthController.html":{}}}],["httpstatus",{"_index":122,"title":{},"body":{"controllers/AuthController.html":{}}}],["id",{"_index":114,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/Card.html":{},"classes/JoinUserRoom.html":{},"injectables/JwtStrategy.html":{},"classes/Room.html":{},"controllers/RoomController.html":{},"injectables/RoomService.html":{},"injectables/RoomUserService.html":{},"classes/User.html":{},"classes/UserAuthDto.html":{},"injectables/UserService.html":{},"miscellaneous/typealiases.html":{}}}],["identifier",{"_index":534,"title":{},"body":{"coverage.html":{}}}],["ignoreexpiration",{"_index":314,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["implements",{"_index":346,"title":{},"body":{"injectables/PrismaService.html":{}}}],["implied",{"_index":758,"title":{},"body":{"license.html":{}}}],["import",{"_index":19,"title":{},"body":{"controllers/AppController.html":{},"classes/AppGateway.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"modules/CardModule.html":{},"injectables/CardService.html":{},"classes/CreateRoomAndUserDto.html":{},"classes/JoinUserRoom.html":{},"injectables/JwtStrategy.html":{},"modules/PrismaModule.html":{},"injectables/PrismaService.html":{},"classes/Room.html":{},"controllers/RoomController.html":{},"modules/RoomModule.html":{},"injectables/RoomService.html":{},"controllers/RoomUserController.html":{},"modules/RoomUserModule.html":{},"injectables/RoomUserService.html":{},"classes/UserAuthDto.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{}}}],["imports",{"_index":82,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CardModule.html":{},"modules/RoomModule.html":{},"modules/UserModule.html":{}}}],["included",{"_index":752,"title":{},"body":{"license.html":{}}}],["including",{"_index":731,"title":{},"body":{"license.html":{}}}],["index",{"_index":7,"title":{"index.html":{}},"body":{"controllers/AppController.html":{},"classes/AppGateway.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/Card.html":{},"injectables/CardService.html":{},"classes/CreateRoomAndUserDto.html":{},"classes/JoinUserRoom.html":{},"injectables/JwtStrategy.html":{},"injectables/PrismaService.html":{},"classes/Room.html":{},"controllers/RoomController.html":{},"injectables/RoomService.html":{},"controllers/RoomUserController.html":{},"injectables/RoomUserService.html":{},"classes/User.html":{},"classes/UserAuthDto.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["inestapplication",{"_index":342,"title":{},"body":{"injectables/PrismaService.html":{}}}],["info",{"_index":3,"title":{},"body":{"controllers/AppController.html":{},"classes/AppGateway.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/Card.html":{},"modules/CardModule.html":{},"injectables/CardService.html":{},"classes/CreateRoomAndUserDto.html":{},"classes/JoinUserRoom.html":{},"injectables/JwtStrategy.html":{},"modules/PrismaModule.html":{},"injectables/PrismaService.html":{},"classes/Room.html":{},"controllers/RoomController.html":{},"modules/RoomModule.html":{},"injectables/RoomService.html":{},"controllers/RoomUserController.html":{},"modules/RoomUserModule.html":{},"injectables/RoomUserService.html":{},"classes/User.html":{},"classes/UserAuthDto.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{}}}],["informam",{"_index":649,"title":{},"body":{"index.html":{}}}],["information",{"_index":117,"title":{},"body":{"controllers/AuthController.html":{}}}],["inject",{"_index":214,"title":{},"body":{"injectables/CardService.html":{},"injectables/RoomService.html":{},"injectables/RoomUserService.html":{},"injectables/UserService.html":{}}}],["inject(forwardref",{"_index":226,"title":{},"body":{"injectables/CardService.html":{},"injectables/RoomService.html":{},"injectables/RoomUserService.html":{},"injectables/UserService.html":{}}}],["injectable",{"_index":93,"title":{"injectables/AppService.html":{},"injectables/AuthService.html":{},"injectables/CardService.html":{},"injectables/JwtStrategy.html":{},"injectables/PrismaService.html":{},"injectables/RoomService.html":{},"injectables/RoomUserService.html":{},"injectables/UserService.html":{}},"body":{"injectables/AppService.html":{},"injectables/AuthService.html":{},"injectables/CardService.html":{},"injectables/JwtStrategy.html":{},"injectables/PrismaService.html":{},"injectables/RoomService.html":{},"injectables/RoomUserService.html":{},"injectables/UserService.html":{},"coverage.html":{}}}],["injectables",{"_index":94,"title":{},"body":{"injectables/AppService.html":{},"injectables/AuthService.html":{},"injectables/CardService.html":{},"injectables/JwtStrategy.html":{},"injectables/PrismaService.html":{},"injectables/RoomService.html":{},"injectables/RoomUserService.html":{},"injectables/UserService.html":{},"overview.html":{}}}],["instal",{"_index":642,"title":{},"body":{"index.html":{}}}],["instalar",{"_index":638,"title":{},"body":{"index.html":{}}}],["instalação",{"_index":646,"title":{},"body":{"index.html":{}}}],["instruções",{"_index":616,"title":{},"body":{"index.html":{}}}],["isadmin",{"_index":554,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["isadmin(data",{"_index":602,"title":{},"body":{"miscellaneous/functions.html":{}}}],["isnotempty",{"_index":264,"title":{},"body":{"classes/CreateRoomAndUserDto.html":{}}}],["isnumber",{"_index":265,"title":{},"body":{"classes/CreateRoomAndUserDto.html":{}}}],["isnumber()@ispositive()@min(1)@max(3)@isnotempty()@apiproperty({description",{"_index":259,"title":{},"body":{"classes/CreateRoomAndUserDto.html":{}}}],["isnumber()@ispositive()@min(5)@max(10)@isnotempty()@apiproperty({description",{"_index":240,"title":{},"body":{"classes/CreateRoomAndUserDto.html":{}}}],["ispositive",{"_index":266,"title":{},"body":{"classes/CreateRoomAndUserDto.html":{}}}],["isstring",{"_index":267,"title":{},"body":{"classes/CreateRoomAndUserDto.html":{},"classes/JoinUserRoom.html":{}}}],["isstring()@apiproperty({description",{"_index":255,"title":{},"body":{"classes/CreateRoomAndUserDto.html":{},"classes/JoinUserRoom.html":{}}}],["isstring()@length(1",{"_index":251,"title":{},"body":{"classes/CreateRoomAndUserDto.html":{}}}],["isuuid",{"_index":294,"title":{},"body":{"classes/JoinUserRoom.html":{},"classes/UserAuthDto.html":{}}}],["isuuid()@apiproperty({description",{"_index":286,"title":{},"body":{"classes/JoinUserRoom.html":{},"classes/UserAuthDto.html":{}}}],["joins",{"_index":479,"title":{},"body":{"controllers/UserController.html":{}}}],["joinuserroom",{"_index":279,"title":{"classes/JoinUserRoom.html":{}},"body":{"classes/JoinUserRoom.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"coverage.html":{}}}],["joinuserroom.roomid",{"_index":522,"title":{},"body":{"injectables/UserService.html":{}}}],["joinuserwiththeroomandcreatetheircards",{"_index":477,"title":{},"body":{"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["joinuserwiththeroomandcreatetheircards(@body",{"_index":489,"title":{},"body":{"controllers/UserController.html":{}}}],["joinuserwiththeroomandcreatetheircards(joinuserroom",{"_index":478,"title":{},"body":{"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["jwt",{"_index":159,"title":{},"body":{"modules/AuthModule.html":{},"injectables/JwtStrategy.html":{},"modules/RoomModule.html":{},"dependencies.html":{}}}],["jwt.strategy",{"_index":156,"title":{},"body":{"modules/AuthModule.html":{}}}],["jwtfromrequest",{"_index":312,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["jwtmodule",{"_index":145,"title":{},"body":{"modules/AuthModule.html":{},"modules/UserModule.html":{}}}],["jwtmodule.register",{"_index":160,"title":{},"body":{"modules/AuthModule.html":{}}}],["jwtservice",{"_index":171,"title":{},"body":{"injectables/AuthService.html":{},"modules/CardModule.html":{},"modules/RoomModule.html":{},"modules/RoomUserModule.html":{}}}],["jwtstrategy",{"_index":140,"title":{"injectables/JwtStrategy.html":{}},"body":{"modules/AuthModule.html":{},"injectables/JwtStrategy.html":{},"coverage.html":{},"overview.html":{}}}],["kind",{"_index":757,"title":{},"body":{"license.html":{}}}],["length",{"_index":268,"title":{},"body":{"classes/CreateRoomAndUserDto.html":{}}}],["length(1",{"_index":272,"title":{},"body":{"classes/CreateRoomAndUserDto.html":{}}}],["leonardo",{"_index":697,"title":{},"body":{"index.html":{}}}],["liability",{"_index":772,"title":{},"body":{"license.html":{}}}],["liable",{"_index":769,"title":{},"body":{"license.html":{}}}],["license",{"_index":710,"title":{"license.html":{}},"body":{"index.html":{},"license.html":{},"properties.html":{}}}],["license.md",{"_index":713,"title":{},"body":{"index.html":{}}}],["licença",{"_index":706,"title":{},"body":{"index.html":{}}}],["limitation",{"_index":732,"title":{},"body":{"license.html":{}}}],["limited",{"_index":759,"title":{},"body":{"license.html":{}}}],["literal",{"_index":299,"title":{},"body":{"injectables/JwtStrategy.html":{},"miscellaneous/typealiases.html":{}}}],["lo",{"_index":643,"title":{},"body":{"index.html":{}}}],["local",{"_index":578,"title":{},"body":{"dependencies.html":{},"index.html":{}}}],["lopes",{"_index":705,"title":{},"body":{"index.html":{}}}],["los",{"_index":668,"title":{},"body":{"index.html":{}}}],["lucas",{"_index":700,"title":{},"body":{"index.html":{},"license.html":{}}}],["luis",{"_index":692,"title":{},"body":{"index.html":{}}}],["marcelo",{"_index":702,"title":{},"body":{"index.html":{}}}],["marques",{"_index":701,"title":{},"body":{"index.html":{},"license.html":{}}}],["matching",{"_index":35,"title":{},"body":{"controllers/AppController.html":{},"classes/AppGateway.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/Card.html":{},"modules/CardModule.html":{},"injectables/CardService.html":{},"classes/CreateRoomAndUserDto.html":{},"classes/JoinUserRoom.html":{},"injectables/JwtStrategy.html":{},"modules/PrismaModule.html":{},"injectables/PrismaService.html":{},"classes/Room.html":{},"controllers/RoomController.html":{},"modules/RoomModule.html":{},"injectables/RoomService.html":{},"controllers/RoomUserController.html":{},"modules/RoomUserModule.html":{},"injectables/RoomUserService.html":{},"classes/User.html":{},"classes/UserAuthDto.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"changelog.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"license.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"todo.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["max",{"_index":269,"title":{},"body":{"classes/CreateRoomAndUserDto.html":{}}}],["max(10",{"_index":276,"title":{},"body":{"classes/CreateRoomAndUserDto.html":{}}}],["max(3",{"_index":278,"title":{},"body":{"classes/CreateRoomAndUserDto.html":{}}}],["merchantability",{"_index":761,"title":{},"body":{"license.html":{}}}],["merge",{"_index":736,"title":{},"body":{"license.html":{}}}],["message",{"_index":52,"title":{},"body":{"classes/AppGateway.html":{}}}],["messagebody",{"_index":54,"title":{},"body":{"classes/AppGateway.html":{}}}],["metadata",{"_index":581,"title":{},"body":{"dependencies.html":{}}}],["methods",{"_index":8,"title":{},"body":{"controllers/AppController.html":{},"classes/AppGateway.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/CardService.html":{},"injectables/JwtStrategy.html":{},"injectables/PrismaService.html":{},"controllers/RoomController.html":{},"injectables/RoomService.html":{},"controllers/RoomUserController.html":{},"injectables/RoomUserService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["min",{"_index":270,"title":{},"body":{"classes/CreateRoomAndUserDto.html":{}}}],["min(1",{"_index":277,"title":{},"body":{"classes/CreateRoomAndUserDto.html":{}}}],["min(5",{"_index":275,"title":{},"body":{"classes/CreateRoomAndUserDto.html":{}}}],["miscellaneous",{"_index":592,"title":{"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}},"body":{"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["mit",{"_index":709,"title":{},"body":{"index.html":{},"license.html":{}}}],["modify",{"_index":735,"title":{},"body":{"license.html":{}}}],["module",{"_index":64,"title":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CardModule.html":{},"modules/PrismaModule.html":{},"modules/RoomModule.html":{},"modules/RoomUserModule.html":{},"modules/UserModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CardModule.html":{},"modules/PrismaModule.html":{},"modules/RoomModule.html":{},"modules/RoomUserModule.html":{},"modules/UserModule.html":{}}}],["modules",{"_index":66,"title":{"modules.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CardModule.html":{},"modules/PrismaModule.html":{},"modules/RoomModule.html":{},"modules/RoomUserModule.html":{},"modules/UserModule.html":{},"modules.html":{},"overview.html":{}}}],["máquina",{"_index":627,"title":{},"body":{"index.html":{}}}],["na",{"_index":625,"title":{},"body":{"index.html":{}}}],["name",{"_index":50,"title":{},"body":{"classes/AppGateway.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/CardService.html":{},"classes/CreateRoomAndUserDto.html":{},"classes/JoinUserRoom.html":{},"injectables/JwtStrategy.html":{},"injectables/PrismaService.html":{},"classes/Room.html":{},"controllers/RoomController.html":{},"injectables/RoomService.html":{},"controllers/RoomUserController.html":{},"injectables/RoomUserService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"miscellaneous/functions.html":{}}}],["nestjs/common",{"_index":20,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"modules/CardModule.html":{},"injectables/CardService.html":{},"injectables/JwtStrategy.html":{},"modules/PrismaModule.html":{},"injectables/PrismaService.html":{},"controllers/RoomController.html":{},"modules/RoomModule.html":{},"injectables/RoomService.html":{},"controllers/RoomUserController.html":{},"modules/RoomUserModule.html":{},"injectables/RoomUserService.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"dependencies.html":{}}}],["nestjs/core",{"_index":560,"title":{},"body":{"dependencies.html":{}}}],["nestjs/jwt",{"_index":146,"title":{},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{},"modules/CardModule.html":{},"modules/RoomModule.html":{},"modules/RoomUserModule.html":{},"modules/UserModule.html":{},"dependencies.html":{}}}],["nestjs/mapped",{"_index":561,"title":{},"body":{"dependencies.html":{}}}],["nestjs/passport",{"_index":148,"title":{},"body":{"modules/AuthModule.html":{},"injectables/JwtStrategy.html":{},"controllers/RoomController.html":{},"modules/RoomModule.html":{},"dependencies.html":{}}}],["nestjs/platform",{"_index":563,"title":{},"body":{"dependencies.html":{}}}],["nestjs/schedule",{"_index":567,"title":{},"body":{"dependencies.html":{}}}],["nestjs/swagger",{"_index":23,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"classes/CreateRoomAndUserDto.html":{},"classes/JoinUserRoom.html":{},"controllers/RoomController.html":{},"controllers/RoomUserController.html":{},"classes/UserAuthDto.html":{},"controllers/UserController.html":{},"dependencies.html":{}}}],["nestjs/websockets",{"_index":57,"title":{},"body":{"classes/AppGateway.html":{},"dependencies.html":{}}}],["new",{"_index":245,"title":{},"body":{"classes/CreateRoomAndUserDto.html":{},"injectables/JwtStrategy.html":{},"controllers/UserController.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["nickname",{"_index":238,"title":{},"body":{"classes/CreateRoomAndUserDto.html":{},"classes/JoinUserRoom.html":{},"injectables/JwtStrategy.html":{},"injectables/RoomUserService.html":{},"classes/User.html":{},"injectables/UserService.html":{}}}],["nickname.trim",{"_index":527,"title":{},"body":{"injectables/UserService.html":{}}}],["nodejs",{"_index":687,"title":{},"body":{"index.html":{}}}],["noninfringement",{"_index":765,"title":{},"body":{"license.html":{}}}],["notfounderror",{"_index":176,"title":{},"body":{"injectables/AuthService.html":{},"injectables/RoomService.html":{},"injectables/UserService.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["notfounderror(data",{"_index":603,"title":{},"body":{"miscellaneous/functions.html":{}}}],["notfounderror(numbersofcards",{"_index":526,"title":{},"body":{"injectables/UserService.html":{}}}],["notfounderror(room",{"_index":418,"title":{},"body":{"injectables/RoomService.html":{}}}],["notfounderror(rooms",{"_index":417,"title":{},"body":{"injectables/RoomService.html":{}}}],["notfounderror(user",{"_index":186,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UserService.html":{}}}],["notfounderror(users",{"_index":525,"title":{},"body":{"injectables/UserService.html":{}}}],["notice",{"_index":750,"title":{},"body":{"license.html":{}}}],["number",{"_index":207,"title":{},"body":{"injectables/CardService.html":{},"classes/CreateRoomAndUserDto.html":{},"classes/Room.html":{},"injectables/RoomService.html":{},"classes/User.html":{}}}],["numberofusercards",{"_index":209,"title":{},"body":{"injectables/CardService.html":{}}}],["numberofusercardsinaroom",{"_index":216,"title":{},"body":{"injectables/CardService.html":{},"injectables/UserService.html":{},"miscellaneous/typealiases.html":{}}}],["numberofusercardsinaroom.rooms[0].room.usercards",{"_index":229,"title":{},"body":{"injectables/CardService.html":{}}}],["numbers",{"_index":192,"title":{},"body":{"classes/Card.html":{},"injectables/UserService.html":{}}}],["numbersofcards",{"_index":228,"title":{},"body":{"injectables/CardService.html":{},"injectables/UserService.html":{}}}],["o",{"_index":639,"title":{},"body":{"index.html":{}}}],["obj",{"_index":604,"title":{},"body":{"miscellaneous/functions.html":{}}}],["object",{"_index":513,"title":{},"body":{"injectables/UserService.html":{}}}],["obtaining",{"_index":724,"title":{},"body":{"license.html":{}}}],["obtenha",{"_index":620,"title":{},"body":{"index.html":{}}}],["obter",{"_index":664,"title":{},"body":{"index.html":{}}}],["onmoduleinit",{"_index":340,"title":{},"body":{"injectables/PrismaService.html":{}}}],["operação",{"_index":624,"title":{},"body":{"index.html":{}}}],["optional",{"_index":51,"title":{},"body":{"classes/AppGateway.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/CardService.html":{},"injectables/JwtStrategy.html":{},"injectables/PrismaService.html":{},"controllers/RoomController.html":{},"injectables/RoomService.html":{},"controllers/RoomUserController.html":{},"injectables/RoomUserService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"miscellaneous/functions.html":{}}}],["os",{"_index":672,"title":{},"body":{"index.html":{}}}],["otherwise",{"_index":777,"title":{},"body":{"license.html":{}}}],["ou",{"_index":667,"title":{},"body":{"index.html":{}}}],["out",{"_index":79,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CardModule.html":{},"modules/PrismaModule.html":{},"modules/RoomModule.html":{},"modules/RoomUserModule.html":{},"modules/UserModule.html":{},"license.html":{},"overview.html":{}}}],["overview",{"_index":785,"title":{"overview.html":{}},"body":{"overview.html":{}}}],["package",{"_index":558,"title":{"dependencies.html":{},"properties.html":{}},"body":{}}],["para",{"_index":628,"title":{},"body":{"index.html":{}}}],["param",{"_index":483,"title":{},"body":{"controllers/UserController.html":{}}}],["parameters",{"_index":49,"title":{},"body":{"classes/AppGateway.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/CardService.html":{},"injectables/JwtStrategy.html":{},"injectables/PrismaService.html":{},"controllers/RoomController.html":{},"injectables/RoomService.html":{},"controllers/RoomUserController.html":{},"injectables/RoomUserService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"miscellaneous/functions.html":{}}}],["particular",{"_index":763,"title":{},"body":{"license.html":{}}}],["parágrafo",{"_index":608,"title":{},"body":{"index.html":{}}}],["passo",{"_index":648,"title":{},"body":{"index.html":{}}}],["passport",{"_index":306,"title":{},"body":{"injectables/JwtStrategy.html":{},"dependencies.html":{}}}],["passportmodule",{"_index":147,"title":{},"body":{"modules/AuthModule.html":{},"modules/RoomModule.html":{}}}],["passportmodule.register",{"_index":157,"title":{},"body":{"modules/AuthModule.html":{},"modules/RoomModule.html":{}}}],["passportstrategy",{"_index":303,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["passportstrategy(strategy",{"_index":310,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["payload",{"_index":301,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["payload.userid",{"_index":319,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["pequena",{"_index":669,"title":{},"body":{"index.html":{}}}],["permission",{"_index":718,"title":{},"body":{"license.html":{},"miscellaneous/variables.html":{}}}],["permit",{"_index":743,"title":{},"body":{"license.html":{}}}],["permitirão",{"_index":617,"title":{},"body":{"index.html":{}}}],["person",{"_index":723,"title":{},"body":{"license.html":{}}}],["persons",{"_index":744,"title":{},"body":{"license.html":{}}}],["pipoca",{"_index":283,"title":{},"body":{"classes/JoinUserRoom.html":{}}}],["ploomes",{"_index":101,"title":{},"body":{"injectables/AppService.html":{}}}],["ponta",{"_index":678,"title":{},"body":{"index.html":{}}}],["porqu",{"_index":683,"title":{},"body":{"index.html":{}}}],["portions",{"_index":754,"title":{},"body":{"license.html":{}}}],["post",{"_index":123,"title":{},"body":{"controllers/AuthController.html":{},"controllers/RoomUserController.html":{},"controllers/UserController.html":{}}}],["post('/join",{"_index":488,"title":{},"body":{"controllers/UserController.html":{}}}],["post()@httpcode(httpstatus.ok)@apioperation({summary",{"_index":111,"title":{},"body":{"controllers/AuthController.html":{}}}],["postgresql",{"_index":690,"title":{},"body":{"index.html":{}}}],["pr",{"_index":634,"title":{},"body":{"index.html":{}}}],["precisa",{"_index":637,"title":{},"body":{"index.html":{}}}],["prefix",{"_index":106,"title":{},"body":{"controllers/AuthController.html":{},"controllers/RoomController.html":{},"controllers/RoomUserController.html":{}}}],["prisma",{"_index":173,"title":{},"body":{"injectables/AuthService.html":{},"injectables/CardService.html":{},"injectables/JwtStrategy.html":{},"injectables/RoomService.html":{},"injectables/RoomUserService.html":{},"injectables/UserService.html":{}}}],["prisma.roomcreateinput",{"_index":408,"title":{},"body":{"injectables/RoomService.html":{}}}],["prisma.service",{"_index":336,"title":{},"body":{"modules/PrismaModule.html":{}}}],["prisma.usercreateinput",{"_index":519,"title":{},"body":{"injectables/UserService.html":{}}}],["prisma.userroomcreateinput",{"_index":453,"title":{},"body":{"injectables/RoomUserService.html":{}}}],["prisma/client",{"_index":215,"title":{},"body":{"injectables/CardService.html":{},"injectables/PrismaService.html":{},"injectables/RoomService.html":{},"injectables/RoomUserService.html":{},"injectables/UserService.html":{},"dependencies.html":{}}}],["prisma/prisma.module",{"_index":87,"title":{},"body":{"modules/AppModule.html":{}}}],["prismaclient",{"_index":338,"title":{},"body":{"injectables/PrismaService.html":{}}}],["prismamodule",{"_index":73,"title":{"modules/PrismaModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CardModule.html":{},"modules/PrismaModule.html":{},"modules/RoomModule.html":{},"modules/UserModule.html":{},"modules.html":{},"overview.html":{}}}],["prismaservice",{"_index":170,"title":{"injectables/PrismaService.html":{}},"body":{"injectables/AuthService.html":{},"injectables/CardService.html":{},"injectables/JwtStrategy.html":{},"modules/PrismaModule.html":{},"injectables/PrismaService.html":{},"injectables/RoomService.html":{},"modules/RoomUserModule.html":{},"injectables/RoomUserService.html":{},"injectables/UserService.html":{},"coverage.html":{},"overview.html":{}}}],["private",{"_index":179,"title":{},"body":{"injectables/AuthService.html":{},"injectables/CardService.html":{},"injectables/RoomService.html":{},"injectables/RoomUserService.html":{},"injectables/UserService.html":{}}}],["process.env.jwt_secret",{"_index":162,"title":{},"body":{"modules/AuthModule.html":{},"injectables/JwtStrategy.html":{}}}],["projeto",{"_index":611,"title":{},"body":{"index.html":{}}}],["promise",{"_index":119,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/CardService.html":{},"injectables/RoomService.html":{},"injectables/RoomUserService.html":{},"injectables/UserService.html":{}}}],["properties",{"_index":39,"title":{"properties.html":{}},"body":{"classes/AppGateway.html":{},"classes/Card.html":{},"classes/CreateRoomAndUserDto.html":{},"classes/JoinUserRoom.html":{},"classes/Room.html":{},"classes/User.html":{},"classes/UserAuthDto.html":{},"injectables/UserService.html":{},"properties.html":{}}}],["provided",{"_index":755,"title":{},"body":{"license.html":{}}}],["providers",{"_index":81,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CardModule.html":{},"modules/PrismaModule.html":{},"modules/RoomModule.html":{},"modules/RoomUserModule.html":{},"modules/UserModule.html":{}}}],["publish",{"_index":737,"title":{},"body":{"license.html":{}}}],["purpose",{"_index":764,"title":{},"body":{"license.html":{}}}],["que",{"_index":618,"title":{},"body":{"index.html":{}}}],["ramon",{"_index":704,"title":{},"body":{"index.html":{}}}],["react",{"_index":689,"title":{},"body":{"index.html":{}}}],["readonly",{"_index":30,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/CardService.html":{},"injectables/JwtStrategy.html":{},"controllers/RoomController.html":{},"injectables/RoomService.html":{},"controllers/RoomUserController.html":{},"injectables/RoomUserService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["reflect",{"_index":580,"title":{},"body":{"dependencies.html":{}}}],["repita",{"_index":660,"title":{},"body":{"index.html":{}}}],["request",{"_index":819,"title":{},"body":{"miscellaneous/variables.html":{}}}],["request.user",{"_index":821,"title":{},"body":{"miscellaneous/variables.html":{}}}],["requisitos",{"_index":635,"title":{},"body":{"index.html":{}}}],["reset",{"_index":78,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CardModule.html":{},"modules/PrismaModule.html":{},"modules/RoomModule.html":{},"modules/RoomUserModule.html":{},"modules/UserModule.html":{},"overview.html":{}}}],["response.type",{"_index":130,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["response.type.ts",{"_index":796,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["restriction",{"_index":730,"title":{},"body":{"license.html":{}}}],["results",{"_index":34,"title":{},"body":{"controllers/AppController.html":{},"classes/AppGateway.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/Card.html":{},"modules/CardModule.html":{},"injectables/CardService.html":{},"classes/CreateRoomAndUserDto.html":{},"classes/JoinUserRoom.html":{},"injectables/JwtStrategy.html":{},"modules/PrismaModule.html":{},"injectables/PrismaService.html":{},"classes/Room.html":{},"controllers/RoomController.html":{},"modules/RoomModule.html":{},"injectables/RoomService.html":{},"controllers/RoomUserController.html":{},"modules/RoomUserModule.html":{},"injectables/RoomUserService.html":{},"classes/User.html":{},"classes/UserAuthDto.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"changelog.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"license.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"todo.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["return",{"_index":32,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"controllers/RoomController.html":{},"injectables/RoomService.html":{},"controllers/RoomUserController.html":{},"injectables/RoomUserService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"miscellaneous/variables.html":{}}}],["returns",{"_index":18,"title":{},"body":{"controllers/AppController.html":{},"classes/AppGateway.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/CardService.html":{},"injectables/JwtStrategy.html":{},"injectables/PrismaService.html":{},"controllers/RoomController.html":{},"injectables/RoomService.html":{},"controllers/RoomUserController.html":{},"injectables/RoomUserService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"miscellaneous/functions.html":{}}}],["rights",{"_index":733,"title":{},"body":{"license.html":{}}}],["rimraf",{"_index":583,"title":{},"body":{"dependencies.html":{}}}],["room",{"_index":88,"title":{"classes/Room.html":{}},"body":{"modules/AppModule.html":{},"classes/CreateRoomAndUserDto.html":{},"classes/JoinUserRoom.html":{},"injectables/JwtStrategy.html":{},"classes/Room.html":{},"controllers/RoomController.html":{},"injectables/RoomService.html":{},"controllers/RoomUserController.html":{},"modules/RoomUserModule.html":{},"injectables/RoomUserService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"coverage.html":{}}}],["room'})@post",{"_index":424,"title":{},"body":{"controllers/RoomUserController.html":{}}}],["room.controller",{"_index":390,"title":{},"body":{"modules/RoomModule.html":{}}}],["room.dto",{"_index":485,"title":{},"body":{"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["room.dto.ts",{"_index":281,"title":{},"body":{"classes/JoinUserRoom.html":{},"coverage.html":{}}}],["room.dto.ts:10",{"_index":285,"title":{},"body":{"classes/JoinUserRoom.html":{}}}],["room.dto.ts:17",{"_index":293,"title":{},"body":{"classes/JoinUserRoom.html":{}}}],["room.id",{"_index":466,"title":{},"body":{"injectables/RoomUserService.html":{}}}],["room.service",{"_index":377,"title":{},"body":{"controllers/RoomController.html":{},"modules/RoomModule.html":{}}}],["room.type",{"_index":219,"title":{},"body":{"injectables/CardService.html":{},"injectables/RoomService.html":{},"injectables/RoomUserService.html":{},"injectables/UserService.html":{}}}],["room.type.ts",{"_index":799,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["room/room.module",{"_index":91,"title":{},"body":{"modules/AppModule.html":{}}}],["roomcontroller",{"_index":358,"title":{"controllers/RoomController.html":{}},"body":{"controllers/RoomController.html":{},"modules/RoomModule.html":{},"coverage.html":{}}}],["roomid",{"_index":282,"title":{},"body":{"classes/JoinUserRoom.html":{},"injectables/JwtStrategy.html":{},"injectables/RoomService.html":{},"injectables/RoomUserService.html":{},"injectables/UserService.html":{}}}],["roommodule",{"_index":74,"title":{"modules/RoomModule.html":{}},"body":{"modules/AppModule.html":{},"modules/RoomModule.html":{},"modules.html":{},"overview.html":{}}}],["roomname",{"_index":329,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["rooms",{"_index":320,"title":{},"body":{"injectables/JwtStrategy.html":{},"controllers/RoomController.html":{},"injectables/RoomService.html":{},"injectables/UserService.html":{}}}],["roomservice",{"_index":141,"title":{"injectables/RoomService.html":{}},"body":{"modules/AuthModule.html":{},"modules/CardModule.html":{},"controllers/RoomController.html":{},"modules/RoomModule.html":{},"injectables/RoomService.html":{},"controllers/RoomUserController.html":{},"modules/RoomUserModule.html":{},"injectables/RoomUserService.html":{},"modules/UserModule.html":{},"coverage.html":{},"overview.html":{}}}],["roomuser",{"_index":464,"title":{},"body":{"injectables/RoomUserService.html":{}}}],["roomuserandcards",{"_index":448,"title":{},"body":{"injectables/RoomUserService.html":{},"miscellaneous/typealiases.html":{}}}],["roomusercontroller",{"_index":419,"title":{"controllers/RoomUserController.html":{}},"body":{"controllers/RoomUserController.html":{},"modules/RoomUserModule.html":{},"coverage.html":{}}}],["roomusermodule",{"_index":75,"title":{"modules/RoomUserModule.html":{}},"body":{"modules/AppModule.html":{},"modules/RoomUserModule.html":{},"modules.html":{},"overview.html":{}}}],["roomuserservice",{"_index":142,"title":{"injectables/RoomUserService.html":{}},"body":{"modules/AuthModule.html":{},"modules/CardModule.html":{},"modules/RoomModule.html":{},"controllers/RoomUserController.html":{},"modules/RoomUserModule.html":{},"injectables/RoomUserService.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"coverage.html":{},"overview.html":{}}}],["roomwithusersandcards",{"_index":804,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["route",{"_index":823,"title":{},"body":{"miscellaneous/variables.html":{}}}],["running",{"_index":102,"title":{},"body":{"injectables/AppService.html":{}}}],["rxjs",{"_index":585,"title":{},"body":{"dependencies.html":{}}}],["santos",{"_index":703,"title":{},"body":{"index.html":{}}}],["score",{"_index":458,"title":{},"body":{"injectables/RoomUserService.html":{},"classes/User.html":{},"injectables/UserService.html":{}}}],["search",{"_index":363,"title":{},"body":{"controllers/RoomController.html":{}}}],["searchauserandnumberofcards",{"_index":501,"title":{},"body":{"injectables/UserService.html":{}}}],["searchauserandnumberofcards(userid",{"_index":511,"title":{},"body":{"injectables/UserService.html":{}}}],["seconds",{"_index":242,"title":{},"body":{"classes/CreateRoomAndUserDto.html":{}}}],["secret",{"_index":161,"title":{},"body":{"modules/AuthModule.html":{}}}],["secretorkey",{"_index":316,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["select",{"_index":184,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"injectables/RoomService.html":{},"injectables/RoomUserService.html":{},"injectables/UserService.html":{}}}],["sell",{"_index":741,"title":{},"body":{"license.html":{}}}],["send",{"_index":112,"title":{},"body":{"controllers/AuthController.html":{}}}],["ser",{"_index":658,"title":{},"body":{"index.html":{}}}],["server",{"_index":40,"title":{},"body":{"classes/AppGateway.html":{}}}],["servererror",{"_index":220,"title":{},"body":{"injectables/CardService.html":{},"injectables/JwtStrategy.html":{},"injectables/RoomService.html":{},"injectables/RoomUserService.html":{},"injectables/UserService.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["servererror(error",{"_index":605,"title":{},"body":{"miscellaneous/functions.html":{}}}],["shall",{"_index":751,"title":{},"body":{"license.html":{}}}],["show",{"_index":243,"title":{},"body":{"classes/CreateRoomAndUserDto.html":{}}}],["shows",{"_index":13,"title":{},"body":{"controllers/AppController.html":{}}}],["signoptions",{"_index":163,"title":{},"body":{"modules/AuthModule.html":{}}}],["sistema",{"_index":666,"title":{},"body":{"index.html":{}}}],["sob",{"_index":708,"title":{},"body":{"index.html":{}}}],["socket.io",{"_index":565,"title":{},"body":{"dependencies.html":{}}}],["software",{"_index":640,"title":{},"body":{"index.html":{},"license.html":{}}}],["source",{"_index":4,"title":{},"body":{"controllers/AppController.html":{},"classes/AppGateway.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/Card.html":{},"modules/CardModule.html":{},"injectables/CardService.html":{},"classes/CreateRoomAndUserDto.html":{},"classes/JoinUserRoom.html":{},"injectables/JwtStrategy.html":{},"modules/PrismaModule.html":{},"injectables/PrismaService.html":{},"classes/Room.html":{},"controllers/RoomController.html":{},"modules/RoomModule.html":{},"injectables/RoomService.html":{},"controllers/RoomUserController.html":{},"modules/RoomUserModule.html":{},"injectables/RoomUserService.html":{},"classes/User.html":{},"classes/UserAuthDto.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{}}}],["src/.../authenticated",{"_index":814,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../create",{"_index":797,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["src/.../generated",{"_index":800,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["src/.../handle",{"_index":595,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../is",{"_index":596,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../main.ts",{"_index":594,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../not",{"_index":597,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../number",{"_index":801,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["src/.../room",{"_index":802,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["src/.../server",{"_index":598,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../user",{"_index":795,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["src/app.controller.ts",{"_index":6,"title":{},"body":{"controllers/AppController.html":{},"coverage.html":{}}}],["src/app.controller.ts:14",{"_index":17,"title":{},"body":{"controllers/AppController.html":{}}}],["src/app.gateway.ts",{"_index":38,"title":{},"body":{"classes/AppGateway.html":{},"coverage.html":{}}}],["src/app.gateway.ts:12",{"_index":44,"title":{},"body":{"classes/AppGateway.html":{}}}],["src/app.gateway.ts:14",{"_index":48,"title":{},"body":{"classes/AppGateway.html":{}}}],["src/app.module.ts",{"_index":80,"title":{},"body":{"modules/AppModule.html":{}}}],["src/app.service.ts",{"_index":95,"title":{},"body":{"injectables/AppService.html":{},"coverage.html":{}}}],["src/app.service.ts:5",{"_index":97,"title":{},"body":{"injectables/AppService.html":{}}}],["src/auth/auth.controller.ts",{"_index":105,"title":{},"body":{"controllers/AuthController.html":{},"coverage.html":{}}}],["src/auth/auth.controller.ts:17",{"_index":118,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/auth.module.ts",{"_index":144,"title":{},"body":{"modules/AuthModule.html":{}}}],["src/auth/auth.service",{"_index":200,"title":{},"body":{"modules/CardModule.html":{},"modules/RoomModule.html":{},"modules/RoomUserModule.html":{},"modules/UserModule.html":{}}}],["src/auth/auth.service.ts",{"_index":166,"title":{},"body":{"injectables/AuthService.html":{},"coverage.html":{}}}],["src/auth/auth.service.ts:15",{"_index":174,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:9",{"_index":172,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/authenticated",{"_index":374,"title":{},"body":{"controllers/RoomController.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/auth/dto/user",{"_index":471,"title":{},"body":{"classes/UserAuthDto.html":{},"coverage.html":{}}}],["src/auth/jwt.strategy.ts",{"_index":295,"title":{},"body":{"injectables/JwtStrategy.html":{},"coverage.html":{}}}],["src/auth/jwt.strategy.ts:18",{"_index":300,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["src/auth/jwt.strategy.ts:9",{"_index":297,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["src/auth/types/user",{"_index":376,"title":{},"body":{"controllers/RoomController.html":{},"injectables/RoomService.html":{},"miscellaneous/typealiases.html":{}}}],["src/card/card.module.ts",{"_index":199,"title":{},"body":{"modules/CardModule.html":{}}}],["src/card/card.service",{"_index":149,"title":{},"body":{"modules/AuthModule.html":{},"modules/RoomModule.html":{},"modules/RoomUserModule.html":{},"injectables/RoomUserService.html":{},"modules/UserModule.html":{}}}],["src/card/card.service.ts",{"_index":202,"title":{},"body":{"injectables/CardService.html":{},"coverage.html":{}}}],["src/card/card.service.ts:11",{"_index":205,"title":{},"body":{"injectables/CardService.html":{}}}],["src/card/card.service.ts:19",{"_index":212,"title":{},"body":{"injectables/CardService.html":{}}}],["src/card/card.service.ts:56",{"_index":208,"title":{},"body":{"injectables/CardService.html":{}}}],["src/card/entities/card.entity",{"_index":442,"title":{},"body":{"injectables/RoomUserService.html":{}}}],["src/card/entities/card.entity.ts",{"_index":191,"title":{},"body":{"classes/Card.html":{},"coverage.html":{}}}],["src/card/entities/card.entity.ts:2",{"_index":193,"title":{},"body":{"classes/Card.html":{}}}],["src/card/entities/card.entity.ts:3",{"_index":194,"title":{},"body":{"classes/Card.html":{}}}],["src/card/types/create",{"_index":808,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["src/card/types/generated",{"_index":810,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["src/main.ts",{"_index":542,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/prisma/prisma.module",{"_index":150,"title":{},"body":{"modules/AuthModule.html":{},"modules/CardModule.html":{},"modules/RoomModule.html":{},"modules/UserModule.html":{}}}],["src/prisma/prisma.module.ts",{"_index":334,"title":{},"body":{"modules/PrismaModule.html":{}}}],["src/prisma/prisma.service",{"_index":175,"title":{},"body":{"injectables/AuthService.html":{},"injectables/CardService.html":{},"injectables/JwtStrategy.html":{},"injectables/RoomService.html":{},"modules/RoomUserModule.html":{},"injectables/RoomUserService.html":{},"injectables/UserService.html":{}}}],["src/prisma/prisma.service.ts",{"_index":337,"title":{},"body":{"injectables/PrismaService.html":{},"coverage.html":{}}}],["src/prisma/prisma.service.ts:10",{"_index":343,"title":{},"body":{"injectables/PrismaService.html":{}}}],["src/prisma/prisma.service.ts:6",{"_index":345,"title":{},"body":{"injectables/PrismaService.html":{}}}],["src/room",{"_index":151,"title":{},"body":{"modules/AuthModule.html":{},"modules/CardModule.html":{},"classes/CreateRoomAndUserDto.html":{},"modules/RoomModule.html":{},"controllers/RoomUserController.html":{},"modules/RoomUserModule.html":{},"injectables/RoomUserService.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["src/room/entities/room.entity",{"_index":446,"title":{},"body":{"injectables/RoomUserService.html":{}}}],["src/room/entities/room.entity.ts",{"_index":350,"title":{},"body":{"classes/Room.html":{},"coverage.html":{}}}],["src/room/entities/room.entity.ts:4",{"_index":352,"title":{},"body":{"classes/Room.html":{}}}],["src/room/entities/room.entity.ts:5",{"_index":353,"title":{},"body":{"classes/Room.html":{}}}],["src/room/entities/room.entity.ts:6",{"_index":355,"title":{},"body":{"classes/Room.html":{}}}],["src/room/entities/room.entity.ts:7",{"_index":351,"title":{},"body":{"classes/Room.html":{}}}],["src/room/entities/room.entity.ts:8",{"_index":356,"title":{},"body":{"classes/Room.html":{}}}],["src/room/room.controller.ts",{"_index":359,"title":{},"body":{"controllers/RoomController.html":{},"coverage.html":{}}}],["src/room/room.controller.ts:19",{"_index":369,"title":{},"body":{"controllers/RoomController.html":{}}}],["src/room/room.controller.ts:27",{"_index":364,"title":{},"body":{"controllers/RoomController.html":{}}}],["src/room/room.module.ts",{"_index":389,"title":{},"body":{"modules/RoomModule.html":{}}}],["src/room/room.service",{"_index":153,"title":{},"body":{"modules/AuthModule.html":{},"modules/CardModule.html":{},"controllers/RoomUserController.html":{},"modules/RoomUserModule.html":{},"injectables/RoomUserService.html":{},"modules/UserModule.html":{}}}],["src/room/room.service.ts",{"_index":391,"title":{},"body":{"injectables/RoomService.html":{},"coverage.html":{}}}],["src/room/room.service.ts:102",{"_index":401,"title":{},"body":{"injectables/RoomService.html":{}}}],["src/room/room.service.ts:118",{"_index":397,"title":{},"body":{"injectables/RoomService.html":{}}}],["src/room/room.service.ts:12",{"_index":395,"title":{},"body":{"injectables/RoomService.html":{}}}],["src/room/room.service.ts:20",{"_index":400,"title":{},"body":{"injectables/RoomService.html":{}}}],["src/room/room.service.ts:47",{"_index":398,"title":{},"body":{"injectables/RoomService.html":{}}}],["src/room/room.service.ts:60",{"_index":402,"title":{},"body":{"injectables/RoomService.html":{}}}],["src/room/types/create",{"_index":809,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["src/user/dto/join",{"_index":280,"title":{},"body":{"classes/JoinUserRoom.html":{},"coverage.html":{}}}],["src/user/entities/user.entity",{"_index":357,"title":{},"body":{"classes/Room.html":{},"injectables/RoomUserService.html":{}}}],["src/user/entities/user.entity.ts",{"_index":467,"title":{},"body":{"classes/User.html":{},"coverage.html":{}}}],["src/user/entities/user.entity.ts:2",{"_index":468,"title":{},"body":{"classes/User.html":{}}}],["src/user/entities/user.entity.ts:3",{"_index":469,"title":{},"body":{"classes/User.html":{}}}],["src/user/entities/user.entity.ts:4",{"_index":470,"title":{},"body":{"classes/User.html":{}}}],["src/user/types/number",{"_index":217,"title":{},"body":{"injectables/CardService.html":{},"miscellaneous/typealiases.html":{}}}],["src/user/types/user",{"_index":812,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["src/user/user.controller.ts",{"_index":476,"title":{},"body":{"controllers/UserController.html":{},"coverage.html":{}}}],["src/user/user.controller.ts:16",{"_index":482,"title":{},"body":{"controllers/UserController.html":{}}}],["src/user/user.module.ts",{"_index":494,"title":{},"body":{"modules/UserModule.html":{}}}],["src/user/user.service",{"_index":154,"title":{},"body":{"modules/AuthModule.html":{},"modules/CardModule.html":{},"injectables/CardService.html":{},"modules/RoomModule.html":{},"injectables/RoomService.html":{},"modules/RoomUserModule.html":{},"injectables/RoomUserService.html":{}}}],["src/user/user.service.ts",{"_index":495,"title":{},"body":{"injectables/UserService.html":{},"coverage.html":{}}}],["src/user/user.service.ts:115",{"_index":504,"title":{},"body":{"injectables/UserService.html":{}}}],["src/user/user.service.ts:14",{"_index":502,"title":{},"body":{"injectables/UserService.html":{}}}],["src/user/user.service.ts:22",{"_index":516,"title":{},"body":{"injectables/UserService.html":{}}}],["src/user/user.service.ts:28",{"_index":506,"title":{},"body":{"injectables/UserService.html":{}}}],["src/user/user.service.ts:46",{"_index":510,"title":{},"body":{"injectables/UserService.html":{}}}],["src/user/user.service.ts:62",{"_index":507,"title":{},"body":{"injectables/UserService.html":{}}}],["src/user/user.service.ts:72",{"_index":509,"title":{},"body":{"injectables/UserService.html":{}}}],["src/user/user.service.ts:90",{"_index":512,"title":{},"body":{"injectables/UserService.html":{}}}],["src/utils/handle",{"_index":549,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/utils/is",{"_index":552,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/utils/not",{"_index":177,"title":{},"body":{"injectables/AuthService.html":{},"injectables/RoomService.html":{},"injectables/UserService.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/utils/server",{"_index":221,"title":{},"body":{"injectables/CardService.html":{},"injectables/JwtStrategy.html":{},"injectables/RoomService.html":{},"injectables/RoomUserService.html":{},"injectables/UserService.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["started",{"_index":530,"title":{"changelog.html":{},"index.html":{},"license.html":{},"todo.html":{}},"body":{}}],["statements",{"_index":535,"title":{},"body":{"coverage.html":{}}}],["status",{"_index":15,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"classes/Room.html":{},"injectables/RoomService.html":{},"injectables/RoomUserService.html":{}}}],["strategy",{"_index":305,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["string",{"_index":46,"title":{},"body":{"classes/AppGateway.html":{},"injectables/AppService.html":{},"classes/Card.html":{},"injectables/CardService.html":{},"classes/CreateRoomAndUserDto.html":{},"classes/JoinUserRoom.html":{},"injectables/JwtStrategy.html":{},"classes/Room.html":{},"injectables/RoomService.html":{},"classes/User.html":{},"classes/UserAuthDto.html":{},"injectables/UserService.html":{},"miscellaneous/functions.html":{}}}],["sua",{"_index":626,"title":{},"body":{"index.html":{}}}],["subject",{"_index":746,"title":{},"body":{"license.html":{}}}],["sublicense",{"_index":739,"title":{},"body":{"license.html":{}}}],["subscribemessage",{"_index":55,"title":{},"body":{"classes/AppGateway.html":{}}}],["subscribemessage('message",{"_index":47,"title":{},"body":{"classes/AppGateway.html":{}}}],["substantial",{"_index":753,"title":{},"body":{"license.html":{}}}],["summary",{"_index":31,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/RoomController.html":{},"controllers/RoomUserController.html":{},"controllers/UserController.html":{}}}],["super",{"_index":311,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["support",{"_index":782,"title":{},"body":{"modules.html":{}}}],["svg",{"_index":783,"title":{},"body":{"modules.html":{}}}],["swagger",{"_index":587,"title":{},"body":{"dependencies.html":{}}}],["série",{"_index":647,"title":{},"body":{"index.html":{}}}],["table",{"_index":557,"title":{},"body":{"coverage.html":{}}}],["tablesort(document.getelementbyid('coverage",{"_index":556,"title":{},"body":{"coverage.html":{}}}],["ter",{"_index":652,"title":{},"body":{"index.html":{}}}],["teste",{"_index":633,"title":{},"body":{"index.html":{}}}],["testes",{"_index":673,"title":{},"body":{"index.html":{}}}],["this.$connect",{"_index":347,"title":{},"body":{"injectables/PrismaService.html":{}}}],["this.$on('beforeexit",{"_index":348,"title":{},"body":{"injectables/PrismaService.html":{}}}],["this.appservice.getstatus('http://localhost:3000",{"_index":33,"title":{},"body":{"controllers/AppController.html":{}}}],["this.authservice.authuser(userauthdto",{"_index":135,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.cardservice.createcard(usertoroom.userid",{"_index":459,"title":{},"body":{"injectables/RoomUserService.html":{}}}],["this.cardsgenerator(numbersofcards",{"_index":231,"title":{},"body":{"injectables/CardService.html":{}}}],["this.createallnumbersdrawn",{"_index":406,"title":{},"body":{"injectables/RoomService.html":{}}}],["this.createguestnicknameforuser(nickname",{"_index":518,"title":{},"body":{"injectables/UserService.html":{}}}],["this.createuser(joinuserroom.nickname",{"_index":521,"title":{},"body":{"injectables/UserService.html":{}}}],["this.jwtservice.sign",{"_index":187,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.prisma.room",{"_index":413,"title":{},"body":{"injectables/RoomService.html":{}}}],["this.prisma.user",{"_index":317,"title":{},"body":{"injectables/JwtStrategy.html":{},"injectables/UserService.html":{}}}],["this.prisma.user.findunique",{"_index":182,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.prisma.userroom",{"_index":457,"title":{},"body":{"injectables/RoomUserService.html":{}}}],["this.roomservice.checkifthereisaroom(usertoroom.roomid",{"_index":451,"title":{},"body":{"injectables/RoomUserService.html":{}}}],["this.roomservice.createroom",{"_index":463,"title":{},"body":{"injectables/RoomUserService.html":{}}}],["this.roomservice.findallrooms",{"_index":385,"title":{},"body":{"controllers/RoomController.html":{}}}],["this.roomservice.findsingleroom(userandroom",{"_index":383,"title":{},"body":{"controllers/RoomController.html":{}}}],["this.roomuserservice.createroomanduserandrelatethem",{"_index":428,"title":{},"body":{"controllers/RoomUserController.html":{}}}],["this.roomuserservice.usertoroomandcreatecards(usertoroom",{"_index":523,"title":{},"body":{"injectables/UserService.html":{}}}],["this.server.emit('message",{"_index":63,"title":{},"body":{"classes/AppGateway.html":{}}}],["this.userselect",{"_index":520,"title":{},"body":{"injectables/UserService.html":{}}}],["this.userservice.createuser(nickname",{"_index":462,"title":{},"body":{"injectables/RoomUserService.html":{}}}],["this.userservice.findsingleuser(usertoroom.userid",{"_index":452,"title":{},"body":{"injectables/RoomUserService.html":{}}}],["this.userservice.joinuserwiththeroomandcreatetheircards",{"_index":490,"title":{},"body":{"controllers/UserController.html":{}}}],["this.userservice.searchauserandnumberofcards(userid",{"_index":227,"title":{},"body":{"injectables/CardService.html":{}}}],["this.usertoroomandcreatecards",{"_index":465,"title":{},"body":{"injectables/RoomUserService.html":{}}}],["throw",{"_index":322,"title":{},"body":{"injectables/JwtStrategy.html":{},"miscellaneous/variables.html":{}}}],["time",{"_index":241,"title":{},"body":{"classes/CreateRoomAndUserDto.html":{}}}],["tinoco",{"_index":698,"title":{},"body":{"index.html":{}}}],["todo",{"_index":792,"title":{"todo.html":{}},"body":{}}],["token",{"_index":116,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/RoomController.html":{}}}],["tort",{"_index":776,"title":{},"body":{"license.html":{}}}],["transformer",{"_index":573,"title":{},"body":{"dependencies.html":{}}}],["true",{"_index":185,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"injectables/RoomService.html":{},"injectables/RoomUserService.html":{},"injectables/UserService.html":{}}}],["type",{"_index":42,"title":{},"body":{"classes/AppGateway.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/Card.html":{},"injectables/CardService.html":{},"classes/CreateRoomAndUserDto.html":{},"classes/JoinUserRoom.html":{},"injectables/JwtStrategy.html":{},"injectables/PrismaService.html":{},"classes/Room.html":{},"controllers/RoomController.html":{},"injectables/RoomService.html":{},"controllers/RoomUserController.html":{},"injectables/RoomUserService.html":{},"classes/User.html":{},"classes/UserAuthDto.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{}}}],["typealiases",{"_index":793,"title":{"miscellaneous/typealiases.html":{}},"body":{}}],["types",{"_index":562,"title":{},"body":{"dependencies.html":{}}}],["types/create",{"_index":404,"title":{},"body":{"injectables/RoomService.html":{}}}],["types/generated",{"_index":224,"title":{},"body":{"injectables/CardService.html":{}}}],["types/number",{"_index":517,"title":{},"body":{"injectables/UserService.html":{}}}],["types/room",{"_index":449,"title":{},"body":{"injectables/RoomUserService.html":{}}}],["types/user",{"_index":129,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{}}}],["typescript",{"_index":688,"title":{},"body":{"index.html":{}}}],["ui",{"_index":588,"title":{},"body":{"dependencies.html":{}}}],["um",{"_index":607,"title":{},"body":{"index.html":{}}}],["uma",{"_index":621,"title":{},"body":{"index.html":{}}}],["unauthorizedexception",{"_index":302,"title":{},"body":{"injectables/JwtStrategy.html":{},"miscellaneous/variables.html":{}}}],["unauthorizedexception('user",{"_index":323,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["undefined",{"_index":601,"title":{},"body":{"miscellaneous/functions.html":{}}}],["unknown",{"_index":195,"title":{},"body":{"classes/Card.html":{},"injectables/JwtStrategy.html":{},"injectables/RoomService.html":{},"injectables/RoomUserService.html":{}}}],["unlicensed",{"_index":790,"title":{},"body":{"properties.html":{}}}],["use",{"_index":734,"title":{},"body":{"license.html":{}}}],["useguards",{"_index":370,"title":{},"body":{"controllers/RoomController.html":{}}}],["useguards(authguard",{"_index":381,"title":{},"body":{"controllers/RoomController.html":{}}}],["user",{"_index":113,"title":{"classes/User.html":{}},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/CardService.html":{},"classes/CreateRoomAndUserDto.html":{},"classes/JoinUserRoom.html":{},"injectables/JwtStrategy.html":{},"classes/Room.html":{},"controllers/RoomController.html":{},"injectables/RoomUserService.html":{},"classes/User.html":{},"classes/UserAuthDto.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["user.controller",{"_index":432,"title":{},"body":{"modules/RoomUserModule.html":{},"modules/UserModule.html":{}}}],["user.controller.ts",{"_index":420,"title":{},"body":{"controllers/RoomUserController.html":{},"coverage.html":{}}}],["user.controller.ts:14",{"_index":425,"title":{},"body":{"controllers/RoomUserController.html":{}}}],["user.decorator",{"_index":375,"title":{},"body":{"controllers/RoomController.html":{}}}],["user.decorator.ts",{"_index":538,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["user.dto",{"_index":426,"title":{},"body":{"controllers/RoomUserController.html":{},"injectables/RoomUserService.html":{}}}],["user.dto.ts",{"_index":236,"title":{},"body":{"classes/CreateRoomAndUserDto.html":{},"coverage.html":{}}}],["user.dto.ts:19",{"_index":254,"title":{},"body":{"classes/CreateRoomAndUserDto.html":{}}}],["user.dto.ts:26",{"_index":258,"title":{},"body":{"classes/CreateRoomAndUserDto.html":{}}}],["user.dto.ts:37",{"_index":250,"title":{},"body":{"classes/CreateRoomAndUserDto.html":{}}}],["user.dto.ts:48",{"_index":262,"title":{},"body":{"classes/CreateRoomAndUserDto.html":{}}}],["user.id",{"_index":189,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"injectables/RoomUserService.html":{},"injectables/UserService.html":{}}}],["user.module",{"_index":90,"title":{},"body":{"modules/AppModule.html":{}}}],["user.module.ts",{"_index":431,"title":{},"body":{"modules/RoomUserModule.html":{}}}],["user.nickname",{"_index":327,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["user.rooms[0].room.id",{"_index":328,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["user.rooms[0].room.name",{"_index":330,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["user.service",{"_index":152,"title":{},"body":{"modules/AuthModule.html":{},"modules/CardModule.html":{},"modules/RoomModule.html":{},"controllers/RoomUserController.html":{},"modules/RoomUserModule.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{}}}],["user.service.ts",{"_index":433,"title":{},"body":{"injectables/RoomUserService.html":{},"coverage.html":{}}}],["user.service.ts:17",{"_index":436,"title":{},"body":{"injectables/RoomUserService.html":{}}}],["user.service.ts:30",{"_index":441,"title":{},"body":{"injectables/RoomUserService.html":{}}}],["user.service.ts:85",{"_index":438,"title":{},"body":{"injectables/RoomUserService.html":{}}}],["user/dto/create",{"_index":235,"title":{},"body":{"classes/CreateRoomAndUserDto.html":{},"controllers/RoomUserController.html":{},"coverage.html":{}}}],["user/room",{"_index":89,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CardModule.html":{},"modules/RoomModule.html":{},"controllers/RoomUserController.html":{},"modules/RoomUserModule.html":{},"injectables/RoomUserService.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"coverage.html":{}}}],["user/types/room",{"_index":811,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["user/types/user",{"_index":444,"title":{},"body":{"injectables/RoomUserService.html":{},"injectables/UserService.html":{},"miscellaneous/typealiases.html":{}}}],["user/user.module",{"_index":92,"title":{},"body":{"modules/AppModule.html":{}}}],["userandhiscards",{"_index":805,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["userandroom",{"_index":326,"title":{},"body":{"injectables/JwtStrategy.html":{},"controllers/RoomController.html":{},"injectables/RoomService.html":{},"miscellaneous/variables.html":{}}}],["userandroomauth",{"_index":307,"title":{},"body":{"injectables/JwtStrategy.html":{},"controllers/RoomController.html":{},"injectables/RoomService.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["userauthdto",{"_index":110,"title":{"classes/UserAuthDto.html":{}},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/UserAuthDto.html":{},"coverage.html":{}}}],["userauthdto.userid",{"_index":183,"title":{},"body":{"injectables/AuthService.html":{}}}],["usercards",{"_index":239,"title":{},"body":{"classes/CreateRoomAndUserDto.html":{},"classes/Room.html":{},"injectables/RoomService.html":{},"injectables/RoomUserService.html":{},"injectables/UserService.html":{}}}],["usercardsinroom",{"_index":807,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["userconnectedtoroom",{"_index":443,"title":{},"body":{"injectables/RoomUserService.html":{},"injectables/UserService.html":{},"miscellaneous/typealiases.html":{}}}],["userconnectedwiththeroom",{"_index":456,"title":{},"body":{"injectables/RoomUserService.html":{},"injectables/UserService.html":{}}}],["userconnectedwiththeroom.room",{"_index":460,"title":{},"body":{"injectables/RoomUserService.html":{}}}],["userconnectedwiththeroom.user",{"_index":461,"title":{},"body":{"injectables/RoomUserService.html":{}}}],["usercontroller",{"_index":475,"title":{"controllers/UserController.html":{}},"body":{"controllers/UserController.html":{},"modules/UserModule.html":{},"coverage.html":{}}}],["userid",{"_index":188,"title":{},"body":{"injectables/AuthService.html":{},"injectables/CardService.html":{},"injectables/JwtStrategy.html":{},"injectables/RoomUserService.html":{},"classes/UserAuthDto.html":{},"injectables/UserService.html":{}}}],["usermodule",{"_index":76,"title":{"modules/UserModule.html":{}},"body":{"modules/AppModule.html":{},"modules/UserModule.html":{},"modules.html":{},"overview.html":{}}}],["users",{"_index":524,"title":{},"body":{"injectables/UserService.html":{},"miscellaneous/typealiases.html":{}}}],["userselect",{"_index":496,"title":{},"body":{"injectables/UserService.html":{}}}],["userservice",{"_index":143,"title":{"injectables/UserService.html":{}},"body":{"modules/AuthModule.html":{},"modules/CardModule.html":{},"injectables/CardService.html":{},"modules/RoomModule.html":{},"injectables/RoomService.html":{},"modules/RoomUserModule.html":{},"injectables/RoomUserService.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"coverage.html":{},"overview.html":{}}}],["usertoroom",{"_index":440,"title":{},"body":{"injectables/RoomUserService.html":{},"injectables/UserService.html":{},"miscellaneous/typealiases.html":{}}}],["usertoroom.roomid",{"_index":454,"title":{},"body":{"injectables/RoomUserService.html":{}}}],["usertoroom.userid",{"_index":455,"title":{},"body":{"injectables/RoomUserService.html":{}}}],["usertoroomandcreatecards",{"_index":435,"title":{},"body":{"injectables/RoomUserService.html":{}}}],["usertoroomandcreatecards(usertoroom",{"_index":439,"title":{},"body":{"injectables/RoomUserService.html":{}}}],["vai",{"_index":612,"title":{},"body":{"index.html":{}}}],["validate",{"_index":296,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["validate(payload",{"_index":298,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["validator",{"_index":271,"title":{},"body":{"classes/CreateRoomAndUserDto.html":{},"classes/JoinUserRoom.html":{},"classes/UserAuthDto.html":{},"dependencies.html":{}}}],["value",{"_index":515,"title":{},"body":{"injectables/UserService.html":{},"miscellaneous/variables.html":{}}}],["variable",{"_index":539,"title":{},"body":{"coverage.html":{}}}],["variables",{"_index":813,"title":{"miscellaneous/variables.html":{}},"body":{"miscellaneous/variables.html":{}}}],["veja",{"_index":711,"title":{},"body":{"index.html":{}}}],["verificam",{"_index":681,"title":{},"body":{"index.html":{}}}],["version",{"_index":788,"title":{},"body":{"properties.html":{}}}],["voc",{"_index":619,"title":{},"body":{"index.html":{}}}],["void",{"_index":53,"title":{},"body":{"classes/AppGateway.html":{},"miscellaneous/functions.html":{}}}],["warranties",{"_index":760,"title":{},"body":{"license.html":{}}}],["warranty",{"_index":756,"title":{},"body":{"license.html":{}}}],["webpack",{"_index":590,"title":{},"body":{"dependencies.html":{}}}],["websocketgateway",{"_index":56,"title":{},"body":{"classes/AppGateway.html":{}}}],["websocketgateway(8001",{"_index":59,"title":{},"body":{"classes/AppGateway.html":{}}}],["websocketserver",{"_index":43,"title":{},"body":{"classes/AppGateway.html":{}}}],["whether",{"_index":773,"title":{},"body":{"license.html":{}}}],["without",{"_index":729,"title":{},"body":{"license.html":{}}}],["zoom",{"_index":77,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CardModule.html":{},"modules/PrismaModule.html":{},"modules/RoomModule.html":{},"modules/RoomUserModule.html":{},"modules/UserModule.html":{},"overview.html":{}}}],["zézinho",{"_index":257,"title":{},"body":{"classes/CreateRoomAndUserDto.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"controllers/AppController.html":{"url":"controllers/AppController.html","title":"controller - AppController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AppController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app.controller.ts\n        \n\n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                getStatus\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        getStatus\n                        \n                    \n                \n            \n            \n                \ngetStatus()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()@ApiOperation({summary: Shows application status})\n                \n            \n\n            \n                \n                    Defined in src/app.controller.ts:14\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         any\n\n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Get } from '@nestjs/common';\nimport { ApiOperation, ApiTags } from '@nestjs/swagger';\nimport { AppService } from './app.service';\n\n@ApiTags('status')\n@Controller()\nexport class AppController {\n  constructor(private readonly appService: AppService) {}\n\n  @Get()\n  @ApiOperation({\n    summary: `Shows application status`,\n  })\n  getStatus() {\n    return this.appService.getStatus('http://localhost:3000');\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/AppGateway.html":{"url":"classes/AppGateway.html","title":"class - AppGateway","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  AppGateway\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app.gateway.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                server\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                handleMessage\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        server\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Server\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @WebSocketServer()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/app.gateway.ts:12\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        handleMessage\n                        \n                    \n                \n            \n            \n                \nhandleMessage(message: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @SubscribeMessage('message')\n                \n            \n\n            \n                \n                    Defined in src/app.gateway.ts:14\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    message\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import {\n  MessageBody,\n  SubscribeMessage,\n  WebSocketGateway,\n  WebSocketServer,\n} from '@nestjs/websockets';\nimport { Server } from 'http';\n\n@WebSocketGateway(8001, { cors: '*' })\nexport class AppGateway {\n  @WebSocketServer()\n  server: Server;\n  @SubscribeMessage('message')\n  handleMessage(@MessageBody() message: string): void {\n    console.log(message);\n    this.server.emit('message', message);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AppModule.html":{"url":"modules/AppModule.html","title":"module - AppModule","body":"\n                   \n\n\n\n\n    Modules\n    AppModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\ncluster_AppModule_providers\n\n\n\n\nAuthModule\n\nAuthModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAuthModule->AppModule\n\n\n\n\n\nCardModule\n\nCardModule\n\nAppModule -->\n\nCardModule->AppModule\n\n\n\n\n\nPrismaModule\n\nPrismaModule\n\nAppModule -->\n\nPrismaModule->AppModule\n\n\n\n\n\nRoomModule\n\nRoomModule\n\nAppModule -->\n\nRoomModule->AppModule\n\n\n\n\n\nRoomUserModule\n\nRoomUserModule\n\nAppModule -->\n\nRoomUserModule->AppModule\n\n\n\n\n\nUserModule\n\nUserModule\n\nAppModule -->\n\nUserModule->AppModule\n\n\n\n\n\nAppService\n\nAppService\n\nAppModule -->\n\nAppService->AppModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/app.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AppService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            AppController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            AuthModule\n                        \n                        \n                            CardModule\n                        \n                        \n                            PrismaModule\n                        \n                        \n                            RoomModule\n                        \n                        \n                            RoomUserModule\n                        \n                        \n                            UserModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { AppController } from './app.controller';\nimport { AppGateway } from './app.gateway';\nimport { AppService } from './app.service';\nimport { AuthModule } from './auth/auth.module';\nimport { CardModule } from './card/card.module';\nimport { PrismaModule } from './prisma/prisma.module';\nimport { RoomUserModule } from './room-user/room-user.module';\nimport { RoomModule } from './room/room.module';\nimport { UserModule } from './user/user.module';\n\n@Module({\n  imports: [\n    UserModule,\n    RoomModule,\n    PrismaModule,\n    CardModule,\n    AuthModule,\n    RoomUserModule,\n  ],\n  controllers: [AppController],\n  providers: [AppService, AppGateway],\n})\nexport class AppModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AppService.html":{"url":"injectables/AppService.html","title":"injectable - AppService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AppService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                getStatus\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        getStatus\n                        \n                    \n                \n            \n            \n                \ngetStatus(baseUrl: string)\n                \n            \n\n\n            \n                \n                    Defined in src/app.service.ts:5\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    baseUrl\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     { status: string; docs: string; }\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\n\n@Injectable()\nexport class AppService {\n  getStatus(baseUrl: string) {\n    return {\n      status: 'Bingo Ploomes is running! 🚀',\n      docs: baseUrl + '/api',\n    };\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/AuthController.html":{"url":"controllers/AuthController.html","title":"controller - AuthController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AuthController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/auth.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                auth\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                authUser\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        authUser\n                        \n                    \n                \n            \n            \n                \nauthUser(userAuthDto: UserAuthDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post()@HttpCode(HttpStatus.OK)@ApiOperation({summary: 'Send user id to generate a token with this information'})\n                \n            \n\n            \n                \n                    Defined in src/auth/auth.controller.ts:17\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userAuthDto\n                                    \n                                                UserAuthDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Body, Controller, HttpCode, HttpStatus, Post } from '@nestjs/common';\nimport { ApiOperation, ApiTags } from '@nestjs/swagger';\nimport { AuthService } from './auth.service';\nimport { UserAuthDto } from './dto/user-auth.dto';\nimport { AuthUserResponse } from './types/user-auth-response.type';\n\n@ApiTags('auth')\n@Controller('auth')\nexport class AuthController {\n  constructor(private readonly authService: AuthService) {}\n\n  @Post()\n  @HttpCode(HttpStatus.OK)\n  @ApiOperation({\n    summary: 'Send user id to generate a token with this information',\n  })\n  authUser(@Body() userAuthDto: UserAuthDto): Promise {\n    return this.authService.authUser(userAuthDto);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AuthModule.html":{"url":"modules/AuthModule.html","title":"module - AuthModule","body":"\n                   \n\n\n\n\n    Modules\n    AuthModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_AuthModule\n\n\n\ncluster_AuthModule_providers\n\n\n\ncluster_AuthModule_imports\n\n\n\n\nPrismaModule\n\nPrismaModule\n\n\n\nAuthModule\n\nAuthModule\n\nAuthModule -->\n\nPrismaModule->AuthModule\n\n\n\n\n\nAuthService\n\nAuthService\n\nAuthModule -->\n\nAuthService->AuthModule\n\n\n\n\n\nCardService\n\nCardService\n\nAuthModule -->\n\nCardService->AuthModule\n\n\n\n\n\nJwtStrategy\n\nJwtStrategy\n\nAuthModule -->\n\nJwtStrategy->AuthModule\n\n\n\n\n\nRoomService\n\nRoomService\n\nAuthModule -->\n\nRoomService->AuthModule\n\n\n\n\n\nRoomUserService\n\nRoomUserService\n\nAuthModule -->\n\nRoomUserService->AuthModule\n\n\n\n\n\nUserService\n\nUserService\n\nAuthModule -->\n\nUserService->AuthModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/auth/auth.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AuthService\n                        \n                        \n                            CardService\n                        \n                        \n                            JwtStrategy\n                        \n                        \n                            RoomService\n                        \n                        \n                            RoomUserService\n                        \n                        \n                            UserService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            AuthController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            PrismaModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { JwtModule } from '@nestjs/jwt';\nimport { PassportModule } from '@nestjs/passport';\nimport { CardService } from 'src/card/card.service';\nimport { PrismaModule } from 'src/prisma/prisma.module';\nimport { RoomUserService } from 'src/room-user/room-user.service';\nimport { RoomService } from 'src/room/room.service';\nimport { UserService } from 'src/user/user.service';\nimport { AuthController } from './auth.controller';\nimport { AuthService } from './auth.service';\nimport { JwtStrategy } from './jwt.strategy';\n\n@Module({\n  imports: [\n    PrismaModule,\n    PassportModule.register({ defaultStrategy: 'jwt' }),\n    JwtModule.register({\n      secret: process.env.JWT_SECRET,\n      signOptions: { expiresIn: '24h' },\n    }),\n  ],\n  controllers: [AuthController],\n  providers: [\n    AuthService,\n    JwtStrategy,\n    CardService,\n    RoomUserService,\n    RoomService,\n    UserService,\n  ],\n})\nexport class AuthModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AuthService.html":{"url":"injectables/AuthService.html","title":"injectable - AuthService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AuthService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/auth.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                authUser\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(prisma: PrismaService, jwtService: JwtService)\n                    \n                \n                        \n                            \n                                Defined in src/auth/auth.service.ts:9\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        prisma\n                                                  \n                                                        \n                                                                        PrismaService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        jwtService\n                                                  \n                                                        \n                                                                    JwtService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        authUser\n                        \n                    \n                \n            \n            \n                \n                    \n                    authUser(userAuthDto: UserAuthDto)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/auth.service.ts:15\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userAuthDto\n                                    \n                                                UserAuthDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { JwtService } from '@nestjs/jwt';\nimport { PrismaService } from 'src/prisma/prisma.service';\nimport { notFoundError } from 'src/utils/not-found.util';\nimport { UserAuthDto } from './dto/user-auth.dto';\nimport { AuthUserResponse } from './types/user-auth-response.type';\n\n@Injectable()\nexport class AuthService {\n  constructor(\n    private readonly prisma: PrismaService,\n    private readonly jwtService: JwtService,\n  ) {}\n\n  async authUser(userAuthDto: UserAuthDto): Promise {\n    const user = await this.prisma.user.findUnique({\n      where: { id: userAuthDto.userId },\n      select: {\n        id: true,\n      },\n    });\n\n    notFoundError(user, `user with this id: (${userAuthDto.userId})`);\n\n    return {\n      token: this.jwtService.sign({ userId: user.id }),\n    };\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Card.html":{"url":"classes/Card.html","title":"class - Card","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Card\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/card/entities/card.entity.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                id\n                            \n                            \n                                numbers\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/card/entities/card.entity.ts:2\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        numbers\n                        \n                    \n                \n            \n                    \n                        \n                                Defined in src/card/entities/card.entity.ts:3\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        export class Card {\n  id: string;\n  numbers: unknown;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/CardModule.html":{"url":"modules/CardModule.html","title":"module - CardModule","body":"\n                   \n\n\n\n\n    Modules\n    CardModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_CardModule\n\n\n\ncluster_CardModule_imports\n\n\n\ncluster_CardModule_providers\n\n\n\n\nPrismaModule\n\nPrismaModule\n\n\n\nCardModule\n\nCardModule\n\nCardModule -->\n\nPrismaModule->CardModule\n\n\n\n\n\nAuthService\n\nAuthService\n\nCardModule -->\n\nAuthService->CardModule\n\n\n\n\n\nCardService\n\nCardService\n\nCardModule -->\n\nCardService->CardModule\n\n\n\n\n\nRoomService\n\nRoomService\n\nCardModule -->\n\nRoomService->CardModule\n\n\n\n\n\nRoomUserService\n\nRoomUserService\n\nCardModule -->\n\nRoomUserService->CardModule\n\n\n\n\n\nUserService\n\nUserService\n\nCardModule -->\n\nUserService->CardModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/card/card.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AuthService\n                        \n                        \n                            CardService\n                        \n                        \n                            RoomService\n                        \n                        \n                            RoomUserService\n                        \n                        \n                            UserService\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            PrismaModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { JwtService } from '@nestjs/jwt';\nimport { AuthService } from 'src/auth/auth.service';\nimport { PrismaModule } from 'src/prisma/prisma.module';\nimport { RoomUserService } from 'src/room-user/room-user.service';\nimport { RoomService } from 'src/room/room.service';\nimport { UserService } from 'src/user/user.service';\nimport { CardService } from './card.service';\n\n@Module({\n  imports: [PrismaModule],\n  controllers: [],\n  providers: [\n    CardService,\n    UserService,\n    RoomService,\n    RoomUserService,\n    AuthService,\n    JwtService\n  ],\n})\nexport class CardModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/CardService.html":{"url":"injectables/CardService.html","title":"injectable - CardService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  CardService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/card/card.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                cardsGenerator\n                            \n                            \n                                    Async\n                                createCard\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(prisma: PrismaService, userService: UserService)\n                    \n                \n                        \n                            \n                                Defined in src/card/card.service.ts:11\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        prisma\n                                                  \n                                                        \n                                                                        PrismaService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        userService\n                                                  \n                                                        \n                                                                        UserService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        cardsGenerator\n                        \n                    \n                \n            \n            \n                \ncardsGenerator(numberOfUserCards: number)\n                \n            \n\n\n            \n                \n                    Defined in src/card/card.service.ts:56\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    numberOfUserCards\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         GeneratedCard[]\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        createCard\n                        \n                    \n                \n            \n            \n                \n                    \n                    createCard(userId: string)\n                \n            \n\n\n            \n                \n                    Defined in src/card/card.service.ts:19\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { forwardRef, Inject, Injectable } from '@nestjs/common';\nimport { Prisma } from '@prisma/client';\nimport { PrismaService } from 'src/prisma/prisma.service';\nimport { NumberOfUserCardsInARoom } from 'src/user/types/number-of-user-cards-in-a-room.type';\nimport { UserService } from 'src/user/user.service';\nimport { serverError } from 'src/utils/server-error.util';\nimport { Card } from './entities/card.entity';\nimport { GeneratedCard } from './types/generated-card.type';\n\n@Injectable()\nexport class CardService {\n  constructor(\n    private readonly prisma: PrismaService,\n\n    @Inject(forwardRef(() => UserService))\n    private readonly userService: UserService,\n  ) {}\n\n  async createCard(userId: string): Promise {\n    const numberOfUserCardsInARoom: NumberOfUserCardsInARoom =\n      await this.userService.searchAUserAndNumberOfCards(userId);\n\n    const numbersOfCards: number =\n      numberOfUserCardsInARoom.rooms[0].room.userCards;\n\n    const generatedCards: GeneratedCard[] = this.cardsGenerator(numbersOfCards);\n\n    const cards: Card[] = [];\n\n    for (let i = 0; i  {\n      while (colLetter.length \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateRoomAndUserDto.html":{"url":"classes/CreateRoomAndUserDto.html","title":"class - CreateRoomAndUserDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateRoomAndUserDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/room-user/dto/create-room-and-user.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                ballTime\n                            \n                            \n                                name\n                            \n                            \n                                nickname\n                            \n                            \n                                userCards\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        ballTime\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNumber()@IsPositive()@Min(5)@Max(10)@IsNotEmpty()@ApiProperty({description: 'Time in seconds to show each new ball (5 to 10 seconds)', example: 10})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/room-user/dto/create-room-and-user.dto.ts:37\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@Length(1, 50)@ApiProperty({description: 'The name of the Room', example: 'Grupo 5'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/room-user/dto/create-room-and-user.dto.ts:19\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        nickname\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@ApiProperty({description: 'Room creator nickname', example: 'Zézinho'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/room-user/dto/create-room-and-user.dto.ts:26\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        userCards\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNumber()@IsPositive()@Min(1)@Max(3)@IsNotEmpty()@ApiProperty({description: 'Number of cards that each user can have (1 to 3)', example: 3})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/room-user/dto/create-room-and-user.dto.ts:48\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\nimport {\n  IsNotEmpty,\n  IsNumber,\n  IsPositive,\n  IsString,\n  Length,\n  Max,\n  Min,\n} from 'class-validator';\n\nexport class CreateRoomAndUserDto {\n  @IsString()\n  @Length(1, 50)\n  @ApiProperty({\n    description: 'The name of the Room',\n    example: 'Grupo 5',\n  })\n  name: string;\n\n  @IsString()\n  @ApiProperty({\n    description: 'Room creator nickname',\n    example: 'Zézinho',\n  })\n  nickname: string;\n\n  @IsNumber()\n  @IsPositive()\n  @Min(5)\n  @Max(10)\n  @IsNotEmpty()\n  @ApiProperty({\n    description: 'Time in seconds to show each new ball (5 to 10 seconds)',\n    example: 10,\n  })\n  ballTime: number;\n\n  @IsNumber()\n  @IsPositive()\n  @Min(1)\n  @Max(3)\n  @IsNotEmpty()\n  @ApiProperty({\n    description: 'Number of cards that each user can have (1 to 3)',\n    example: 3,\n  })\n  userCards: number;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/JoinUserRoom.html":{"url":"classes/JoinUserRoom.html","title":"class - JoinUserRoom","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  JoinUserRoom\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user/dto/join-user-room.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                nickname\n                            \n                            \n                                roomId\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        nickname\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@ApiProperty({description: 'The name of the User', example: 'Pipoca doce'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/dto/join-user-room.dto.ts:10\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        roomId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsUUID()@ApiProperty({description: 'ID of the room in which the user will connect', example: 'fa20725e-521f-4964-945d-a6f60f34387f'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/dto/join-user-room.dto.ts:17\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\nimport { IsString, IsUUID } from 'class-validator';\n\nexport class JoinUserRoom {\n  @IsString()\n  @ApiProperty({\n    description: 'The name of the User',\n    example: 'Pipoca doce',\n  })\n  nickname: string;\n\n  @IsUUID()\n  @ApiProperty({\n    description: 'ID of the room in which the user will connect',\n    example: 'fa20725e-521f-4964-945d-a6f60f34387f',\n  })\n  roomId: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/JwtStrategy.html":{"url":"injectables/JwtStrategy.html","title":"injectable - JwtStrategy","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  JwtStrategy\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/jwt.strategy.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                validate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(prisma: PrismaService)\n                    \n                \n                        \n                            \n                                Defined in src/auth/jwt.strategy.ts:9\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        prisma\n                                                  \n                                                        \n                                                                        PrismaService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        validate\n                        \n                    \n                \n            \n            \n                \n                    \n                    validate(payload: literal type)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/jwt.strategy.ts:18\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    payload\n                                    \n                                            literal type\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, UnauthorizedException } from '@nestjs/common';\nimport { PassportStrategy } from '@nestjs/passport';\nimport { ExtractJwt, Strategy } from 'passport-jwt';\nimport { PrismaService } from 'src/prisma/prisma.service';\nimport { serverError } from 'src/utils/server-error.util';\nimport { UserAndRoomAuth } from './types/user-id-auth.type';\n\n@Injectable()\nexport class JwtStrategy extends PassportStrategy(Strategy) {\n  constructor(private readonly prisma: PrismaService) {\n    super({\n      jwtFromRequest: ExtractJwt.fromAuthHeaderAsBearerToken(),\n      ignoreExpiration: false,\n      secretOrKey: process.env.JWT_SECRET,\n    });\n  }\n\n  async validate(payload: { userId: string }) {\n    const user = await this.prisma.user\n      .findUnique({\n        where: { id: payload.userId },\n        select: {\n          id: true,\n          nickname: true,\n          rooms: {\n            select: {\n              room: {\n                select: {\n                  id: true,\n                  name: true,\n                },\n              },\n            },\n          },\n        },\n      })\n      .catch(serverError);\n\n    if (!user) {\n      throw new UnauthorizedException('User not found or not authorized!');\n    }\n    const userAndRoom: UserAndRoomAuth = {\n      userId: user.id,\n      nickname: user.nickname,\n      roomId: user.rooms[0].room.id,\n      roomName: user.rooms[0].room.name,\n    };\n\n    return userAndRoom;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/PrismaModule.html":{"url":"modules/PrismaModule.html","title":"module - PrismaModule","body":"\n                   \n\n\n\n\n    Modules\n    PrismaModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_PrismaModule\n\n\n\ncluster_PrismaModule_providers\n\n\n\ncluster_PrismaModule_exports\n\n\n\n\nPrismaService \n\nPrismaService \n\n\n\nPrismaModule\n\nPrismaModule\n\nPrismaService  -->\n\nPrismaModule->PrismaService \n\n\n\n\n\nPrismaService\n\nPrismaService\n\nPrismaModule -->\n\nPrismaService->PrismaModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/prisma/prisma.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            PrismaService\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            PrismaService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { PrismaService } from './prisma.service';\n\n@Module({\n  providers: [PrismaService],\n  exports: [PrismaService],\n})\nexport class PrismaModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/PrismaService.html":{"url":"injectables/PrismaService.html","title":"injectable - PrismaService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  PrismaService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/prisma/prisma.service.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                    PrismaClient\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                enableShutdownHooks\n                            \n                            \n                                    Async\n                                onModuleInit\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        enableShutdownHooks\n                        \n                    \n                \n            \n            \n                \n                    \n                    enableShutdownHooks(app: INestApplication)\n                \n            \n\n\n            \n                \n                    Defined in src/prisma/prisma.service.ts:10\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    app\n                                    \n                                            INestApplication\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        onModuleInit\n                        \n                    \n                \n            \n            \n                \n                    \n                    onModuleInit()\n                \n            \n\n\n            \n                \n                    Defined in src/prisma/prisma.service.ts:6\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         any\n\n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { INestApplication, Injectable, OnModuleInit } from '@nestjs/common';\nimport { PrismaClient } from '@prisma/client';\n\n@Injectable()\nexport class PrismaService extends PrismaClient implements OnModuleInit {\n  async onModuleInit() {\n    await this.$connect();\n  }\n\n  async enableShutdownHooks(app: INestApplication) {\n    this.$on('beforeExit', async () => {\n      await app.close();\n    });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Room.html":{"url":"classes/Room.html","title":"class - Room","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Room\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/room/entities/room.entity.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                ballTime\n                            \n                            \n                                id\n                            \n                            \n                                name\n                            \n                            \n                                status\n                            \n                            \n                                userCards\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        ballTime\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                    \n                        \n                                Defined in src/room/entities/room.entity.ts:7\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/room/entities/room.entity.ts:4\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/room/entities/room.entity.ts:5\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        status\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                    \n                        \n                                Defined in src/room/entities/room.entity.ts:6\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        userCards\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                    \n                        \n                                Defined in src/room/entities/room.entity.ts:8\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { User } from 'src/user/entities/user.entity';\n\nexport class Room {\n  id: string;\n  name: string;\n  status: boolean;\n  ballTime: number;\n  userCards: number;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/RoomController.html":{"url":"controllers/RoomController.html","title":"controller - RoomController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  RoomController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/room/room.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                /room\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                findAllRooms\n                            \n                            \n                                findSingleRoom\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        findAllRooms\n                        \n                    \n                \n            \n            \n                \nfindAllRooms()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/all')@ApiOperation({summary: Search all rooms})\n                \n            \n\n            \n                \n                    Defined in src/room/room.controller.ts:27\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         any\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        findSingleRoom\n                        \n                    \n                \n            \n            \n                \nfindSingleRoom(userAndRoom: UserAndRoomAuth)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/single')@UseGuards(undefined)@ApiBearerAuth()@ApiOperation({summary: Fetches the room where the user was bound by the token})\n                \n            \n\n            \n                \n                    Defined in src/room/room.controller.ts:19\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userAndRoom\n                                    \n                                                UserAndRoomAuth\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Get, UseGuards } from '@nestjs/common';\nimport { AuthGuard } from '@nestjs/passport';\nimport { ApiBearerAuth, ApiOperation, ApiTags } from '@nestjs/swagger';\nimport { AuthenticatedUser } from 'src/auth/authenticated-user.decorator';\nimport { UserAndRoomAuth } from 'src/auth/types/user-id-auth.type';\nimport { RoomService } from './room.service';\n\n@ApiTags('room')\n@Controller('/room')\nexport class RoomController {\n  constructor(private readonly roomService: RoomService) {}\n\n  @Get('/single')\n  @UseGuards(AuthGuard())\n  @ApiBearerAuth()\n  @ApiOperation({\n    summary: `Fetches the room where the user was bound by the token`,\n  })\n  findSingleRoom(@AuthenticatedUser() userAndRoom: UserAndRoomAuth) {\n    return this.roomService.findSingleRoom(userAndRoom);\n  }\n\n  @Get('/all')\n  @ApiOperation({\n    summary: `Search all rooms`,\n  })\n  findAllRooms() {\n    return this.roomService.findAllRooms();\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/RoomModule.html":{"url":"modules/RoomModule.html","title":"module - RoomModule","body":"\n                   \n\n\n\n\n    Modules\n    RoomModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_RoomModule\n\n\n\ncluster_RoomModule_imports\n\n\n\ncluster_RoomModule_providers\n\n\n\n\nPrismaModule\n\nPrismaModule\n\n\n\nRoomModule\n\nRoomModule\n\nRoomModule -->\n\nPrismaModule->RoomModule\n\n\n\n\n\nAuthService\n\nAuthService\n\nRoomModule -->\n\nAuthService->RoomModule\n\n\n\n\n\nCardService\n\nCardService\n\nRoomModule -->\n\nCardService->RoomModule\n\n\n\n\n\nRoomService\n\nRoomService\n\nRoomModule -->\n\nRoomService->RoomModule\n\n\n\n\n\nRoomUserService\n\nRoomUserService\n\nRoomModule -->\n\nRoomUserService->RoomModule\n\n\n\n\n\nUserService\n\nUserService\n\nRoomModule -->\n\nUserService->RoomModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/room/room.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AuthService\n                        \n                        \n                            CardService\n                        \n                        \n                            RoomService\n                        \n                        \n                            RoomUserService\n                        \n                        \n                            UserService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            RoomController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            PrismaModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { JwtService } from '@nestjs/jwt';\nimport { PassportModule } from '@nestjs/passport';\nimport { AuthService } from 'src/auth/auth.service';\nimport { CardService } from 'src/card/card.service';\nimport { PrismaModule } from 'src/prisma/prisma.module';\nimport { RoomUserService } from 'src/room-user/room-user.service';\nimport { UserService } from 'src/user/user.service';\nimport { RoomController } from './room.controller';\nimport { RoomService } from './room.service';\n\n@Module({\n  imports: [PrismaModule, PassportModule.register({ defaultStrategy: 'jwt' })],\n  controllers: [RoomController],\n  providers: [\n    RoomService,\n    UserService,\n    CardService,\n    RoomUserService,\n    AuthService,\n    JwtService,\n  ],\n})\nexport class RoomModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/RoomService.html":{"url":"injectables/RoomService.html","title":"injectable - RoomService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  RoomService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/room/room.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                checkIfThereIsARoom\n                            \n                            \n                                createAllNumbersDrawn\n                            \n                            \n                                    Async\n                                createRoom\n                            \n                            \n                                    Async\n                                findAllRooms\n                            \n                            \n                                    Async\n                                findSingleRoom\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(prisma: PrismaService, userService: UserService)\n                    \n                \n                        \n                            \n                                Defined in src/room/room.service.ts:12\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        prisma\n                                                  \n                                                        \n                                                                        PrismaService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        userService\n                                                  \n                                                        \n                                                                        UserService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        checkIfThereIsARoom\n                        \n                    \n                \n            \n            \n                \n                    \n                    checkIfThereIsARoom(roomId: string)\n                \n            \n\n\n            \n                \n                    Defined in src/room/room.service.ts:118\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    roomId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        createAllNumbersDrawn\n                        \n                    \n                \n            \n            \n                \ncreateAllNumbersDrawn()\n                \n            \n\n\n            \n                \n                    Defined in src/room/room.service.ts:47\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     number[]\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        createRoom\n                        \n                    \n                \n            \n            \n                \n                    \n                    createRoom(createRoom: CreateRoom)\n                \n            \n\n\n            \n                \n                    Defined in src/room/room.service.ts:20\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    createRoom\n                                    \n                                                CreateRoom\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findAllRooms\n                        \n                    \n                \n            \n            \n                \n                    \n                    findAllRooms()\n                \n            \n\n\n            \n                \n                    Defined in src/room/room.service.ts:102\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         Promise\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findSingleRoom\n                        \n                    \n                \n            \n            \n                \n                    \n                    findSingleRoom(userAndRoom: UserAndRoomAuth)\n                \n            \n\n\n            \n                \n                    Defined in src/room/room.service.ts:60\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userAndRoom\n                                    \n                                                UserAndRoomAuth\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { forwardRef, Inject, Injectable } from '@nestjs/common';\nimport { Prisma } from '@prisma/client';\nimport { UserAndRoomAuth } from 'src/auth/types/user-id-auth.type';\nimport { PrismaService } from 'src/prisma/prisma.service';\nimport { UserService } from 'src/user/user.service';\nimport { notFoundError } from 'src/utils/not-found.util';\nimport { serverError } from 'src/utils/server-error.util';\nimport { Room } from './entities/room.entity';\nimport { CreateRoom } from './types/create-room.type';\n\n@Injectable()\nexport class RoomService {\n  constructor(\n    private readonly prisma: PrismaService,\n\n    @Inject(forwardRef(() => UserService))\n    private readonly userService: UserService,\n  ) {}\n\n  async createRoom(createRoom: CreateRoom): Promise {\n    const allNumbersDrawn: number[] = this.createAllNumbersDrawn();\n\n    const data: Prisma.RoomCreateInput = {\n      name: createRoom.name,\n      drawnNumbers: allNumbersDrawn,\n      status: true,\n      ballTime: createRoom.ballTime,\n      userCards: createRoom.userCards,\n    };\n\n    const room: Room = await this.prisma.room\n      .create({\n        data,\n        select: {\n          id: true,\n          name: true,\n          status: true,\n          ballTime: true,\n          userCards: true,\n        },\n      })\n      .catch(serverError);\n\n    return room;\n  }\n\n  createAllNumbersDrawn(): number[] {\n    const allNumbersDrawn: number[] = [];\n\n    while (allNumbersDrawn.length  {\n    const rooms: Room[] = await this.prisma.room\n      .findMany({\n        select: {\n          id: true,\n          name: true,\n          status: true,\n          ballTime: true,\n          userCards: true,\n        },\n      })\n      .catch(serverError);\n    notFoundError(rooms, `rooms`);\n    return rooms;\n  }\n\n  async checkIfThereIsARoom(roomId: string): Promise {\n    const room = await this.prisma.room\n      .findUnique({\n        where: { id: roomId },\n        select: {\n          id: true,\n          userCards: true,\n        },\n      })\n      .catch(serverError);\n    notFoundError(room, `room with this id: (${roomId})`);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/RoomUserController.html":{"url":"controllers/RoomUserController.html","title":"controller - RoomUserController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  RoomUserController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/room-user/room-user.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                /room\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                createRoomAndUserHost\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        createRoomAndUserHost\n                        \n                    \n                \n            \n            \n                \ncreateRoomAndUserHost(createRoomAndUserDto: CreateRoomAndUserDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'Create a room'})@Post()\n                \n            \n\n            \n                \n                    Defined in src/room-user/room-user.controller.ts:14\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    createRoomAndUserDto\n                                    \n                                                CreateRoomAndUserDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Body, Controller, Post } from '@nestjs/common';\nimport { ApiOperation, ApiTags } from '@nestjs/swagger';\nimport { CreateRoomAndUserDto } from 'src/room-user/dto/create-room-and-user.dto';\nimport { RoomService } from 'src/room/room.service';\nimport { RoomUserService } from './room-user.service';\n\n@ApiTags('room')\n@Controller('/room')\nexport class RoomUserController {\n  constructor(private readonly roomUserService: RoomUserService) {}\n\n  @ApiOperation({ summary: 'Create a room' })\n  @Post()\n  createRoomAndUserHost(@Body() createRoomAndUserDto: CreateRoomAndUserDto) {\n    return this.roomUserService.createRoomAndUserAndRelateThem(\n      createRoomAndUserDto,\n    );\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/RoomUserModule.html":{"url":"modules/RoomUserModule.html","title":"module - RoomUserModule","body":"\n                   \n\n\n\n\n    Modules\n    RoomUserModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_RoomUserModule\n\n\n\ncluster_RoomUserModule_providers\n\n\n\n\nAuthService\n\nAuthService\n\n\n\nRoomUserModule\n\nRoomUserModule\n\nRoomUserModule -->\n\nAuthService->RoomUserModule\n\n\n\n\n\nCardService\n\nCardService\n\nRoomUserModule -->\n\nCardService->RoomUserModule\n\n\n\n\n\nPrismaService\n\nPrismaService\n\nRoomUserModule -->\n\nPrismaService->RoomUserModule\n\n\n\n\n\nRoomService\n\nRoomService\n\nRoomUserModule -->\n\nRoomService->RoomUserModule\n\n\n\n\n\nRoomUserService\n\nRoomUserService\n\nRoomUserModule -->\n\nRoomUserService->RoomUserModule\n\n\n\n\n\nUserService\n\nUserService\n\nRoomUserModule -->\n\nUserService->RoomUserModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/room-user/room-user.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AuthService\n                        \n                        \n                            CardService\n                        \n                        \n                            PrismaService\n                        \n                        \n                            RoomService\n                        \n                        \n                            RoomUserService\n                        \n                        \n                            UserService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            RoomUserController\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { JwtService } from '@nestjs/jwt';\nimport { AuthService } from 'src/auth/auth.service';\nimport { CardService } from 'src/card/card.service';\nimport { PrismaService } from 'src/prisma/prisma.service';\nimport { RoomService } from 'src/room/room.service';\nimport { UserService } from 'src/user/user.service';\nimport { RoomUserController } from './room-user.controller';\nimport { RoomUserService } from './room-user.service';\n\n@Module({\n  controllers: [RoomUserController],\n  providers: [\n    RoomUserService,\n    UserService,\n    RoomService,\n    PrismaService,\n    CardService,\n    AuthService,\n    JwtService,\n  ],\n})\nexport class RoomUserModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/RoomUserService.html":{"url":"injectables/RoomUserService.html","title":"injectable - RoomUserService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  RoomUserService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/room-user/room-user.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                createRoomAndUserAndRelateThem\n                            \n                            \n                                    Async\n                                userToRoomAndCreateCards\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(prisma: PrismaService, userService: UserService, roomService: RoomService, cardService: CardService)\n                    \n                \n                        \n                            \n                                Defined in src/room-user/room-user.service.ts:17\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        prisma\n                                                  \n                                                        \n                                                                        PrismaService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        userService\n                                                  \n                                                        \n                                                                        UserService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        roomService\n                                                  \n                                                        \n                                                                        RoomService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        cardService\n                                                  \n                                                        \n                                                                        CardService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        createRoomAndUserAndRelateThem\n                        \n                    \n                \n            \n            \n                \n                    \n                    createRoomAndUserAndRelateThem(createRoomAndUserDto: CreateRoomAndUserDto)\n                \n            \n\n\n            \n                \n                    Defined in src/room-user/room-user.service.ts:85\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    createRoomAndUserDto\n                                    \n                                                CreateRoomAndUserDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        userToRoomAndCreateCards\n                        \n                    \n                \n            \n            \n                \n                    \n                    userToRoomAndCreateCards(userToRoom: UserToRoom)\n                \n            \n\n\n            \n                \n                    Defined in src/room-user/room-user.service.ts:30\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userToRoom\n                                    \n                                                UserToRoom\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { forwardRef, Inject, Injectable } from '@nestjs/common';\nimport { Prisma } from '@prisma/client';\nimport { CardService } from 'src/card/card.service';\nimport { Card } from 'src/card/entities/card.entity';\nimport { PrismaService } from 'src/prisma/prisma.service';\nimport { UserConnectedToRoom } from 'src/room-user/types/user-connected-to-room.type';\nimport { UserToRoom } from 'src/room-user/types/user-to-room.type';\nimport { Room } from 'src/room/entities/room.entity';\nimport { RoomService } from 'src/room/room.service';\nimport { User } from 'src/user/entities/user.entity';\nimport { UserService } from 'src/user/user.service';\nimport { serverError } from 'src/utils/server-error.util';\nimport { CreateRoomAndUserDto } from './dto/create-room-and-user.dto';\nimport { RoomUserAndCards } from './types/room-user-and-cards.type';\n\n@Injectable()\nexport class RoomUserService {\n  constructor(\n    private readonly prisma: PrismaService,\n\n    @Inject(forwardRef(() => UserService))\n    private readonly userService: UserService,\n\n    private readonly roomService: RoomService,\n\n    @Inject(forwardRef(() => CardService))\n    private readonly cardService: CardService,\n  ) {}\n\n  async userToRoomAndCreateCards(\n    userToRoom: UserToRoom,\n  ): Promise {\n    await this.roomService.checkIfThereIsARoom(userToRoom.roomId);\n    await this.userService.findSingleUser(userToRoom.userId);\n\n    const data: Prisma.UserRoomCreateInput = {\n      room: {\n        connect: {\n          id: userToRoom.roomId,\n        },\n      },\n      user: {\n        connect: {\n          id: userToRoom.userId,\n        },\n      },\n    };\n\n    const userConnectedWithTheRoom: UserConnectedToRoom =\n      await this.prisma.userRoom\n        .create({\n          data,\n          select: {\n            room: {\n              select: {\n                id: true,\n                name: true,\n                status: true,\n                ballTime: true,\n                userCards: true,\n              },\n            },\n            user: {\n              select: {\n                id: true,\n                nickname: true,\n                score: true,\n              },\n            },\n          },\n        })\n        .catch(serverError);\n\n    const card: Card[] = await this.cardService.createCard(userToRoom.userId);\n\n    const roomUserAndCards: RoomUserAndCards = {\n      room: userConnectedWithTheRoom.room,\n      user: userConnectedWithTheRoom.user,\n      cards: card,\n    };\n\n    return roomUserAndCards;\n  }\n\n  async createRoomAndUserAndRelateThem(\n    createRoomAndUserDto: CreateRoomAndUserDto,\n  ) {\n    const { ballTime, name, nickname, userCards } = createRoomAndUserDto;\n\n    const user: User = await this.userService.createUser(nickname);\n    const room: Room = await this.roomService.createRoom({\n      name,\n      ballTime,\n      userCards,\n    });\n\n    const roomUser: UserConnectedToRoom = await this.userToRoomAndCreateCards({\n      userId: user.id,\n      roomId: room.id,\n    });\n\n    return roomUser;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/User.html":{"url":"classes/User.html","title":"class - User","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  User\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user/entities/user.entity.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                id\n                            \n                            \n                                nickname\n                            \n                            \n                                score\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/user/entities/user.entity.ts:2\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        nickname\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/user/entities/user.entity.ts:3\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        score\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                    \n                        \n                                Defined in src/user/entities/user.entity.ts:4\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        export class User {\n  id: string;\n  nickname: string;\n  score: number;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UserAuthDto.html":{"url":"classes/UserAuthDto.html","title":"class - UserAuthDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UserAuthDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/dto/user-auth.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                userId\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        userId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsUUID()@ApiProperty({description: 'User ID that is authenticating', example: 'fa20725e-521f-4964-945d-a6f60f34387f'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/user-auth.dto.ts:10\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\nimport { IsUUID } from 'class-validator';\n\nexport class UserAuthDto {\n  @IsUUID()\n  @ApiProperty({\n    description: 'User ID that is authenticating',\n    example: 'fa20725e-521f-4964-945d-a6f60f34387f',\n  })\n  userId: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/UserController.html":{"url":"controllers/UserController.html","title":"controller - UserController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  UserController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user/user.controller.ts\n        \n\n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                joinUserWithTheRoomAndCreateTheirCards\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        joinUserWithTheRoomAndCreateTheirCards\n                        \n                    \n                \n            \n            \n                \njoinUserWithTheRoomAndCreateTheirCards(joinUserRoom: JoinUserRoom)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'User joins the room and new cards are created for him'})@Post('/join')\n                \n            \n\n            \n                \n                    Defined in src/user/user.controller.ts:16\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    joinUserRoom\n                                    \n                                                JoinUserRoom\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Body, Controller, Get, Param, Post } from '@nestjs/common';\nimport { ApiOperation, ApiTags } from '@nestjs/swagger';\nimport { JoinUserRoom } from './dto/join-user-room.dto';\nimport { User } from './entities/user.entity';\nimport { UserService } from './user.service';\n\n@ApiTags('user')\n@Controller('')\nexport class UserController {\n  constructor(private readonly userService: UserService) {}\n\n  @ApiOperation({\n    summary: 'User joins the room and new cards are created for him',\n  })\n  @Post('/join')\n  joinUserWithTheRoomAndCreateTheirCards(@Body() joinUserRoom: JoinUserRoom) {\n    return this.userService.joinUserWithTheRoomAndCreateTheirCards(\n      joinUserRoom,\n    );\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/UserModule.html":{"url":"modules/UserModule.html","title":"module - UserModule","body":"\n                   \n\n\n\n\n    Modules\n    UserModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_UserModule\n\n\n\ncluster_UserModule_imports\n\n\n\ncluster_UserModule_providers\n\n\n\n\nPrismaModule\n\nPrismaModule\n\n\n\nUserModule\n\nUserModule\n\nUserModule -->\n\nPrismaModule->UserModule\n\n\n\n\n\nAuthService\n\nAuthService\n\nUserModule -->\n\nAuthService->UserModule\n\n\n\n\n\nCardService\n\nCardService\n\nUserModule -->\n\nCardService->UserModule\n\n\n\n\n\nRoomService\n\nRoomService\n\nUserModule -->\n\nRoomService->UserModule\n\n\n\n\n\nRoomUserService\n\nRoomUserService\n\nUserModule -->\n\nRoomUserService->UserModule\n\n\n\n\n\nUserService\n\nUserService\n\nUserModule -->\n\nUserService->UserModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/user/user.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AuthService\n                        \n                        \n                            CardService\n                        \n                        \n                            RoomService\n                        \n                        \n                            RoomUserService\n                        \n                        \n                            UserService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            UserController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            PrismaModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { JwtModule } from '@nestjs/jwt';\nimport { AuthService } from 'src/auth/auth.service';\nimport { CardService } from 'src/card/card.service';\nimport { PrismaModule } from 'src/prisma/prisma.module';\nimport { RoomUserService } from 'src/room-user/room-user.service';\nimport { RoomService } from 'src/room/room.service';\nimport { UserController } from './user.controller';\nimport { UserService } from './user.service';\n\n@Module({\n  imports: [PrismaModule, JwtModule],\n  controllers: [UserController],\n  providers: [UserService, RoomService, CardService, RoomUserService, AuthService],\n})\nexport class UserModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/UserService.html":{"url":"injectables/UserService.html","title":"injectable - UserService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  UserService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user/user.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                userSelect\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                createGuestNicknameForUser\n                            \n                            \n                                    Async\n                                createUser\n                            \n                            \n                                    Async\n                                findAllUsers\n                            \n                            \n                                    Async\n                                findSingleUser\n                            \n                            \n                                    Async\n                                joinUserWithTheRoomAndCreateTheirCards\n                            \n                            \n                                    Async\n                                searchAUserAndNumberOfCards\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(prisma: PrismaService, roomUserService: RoomUserService)\n                    \n                \n                        \n                            \n                                Defined in src/user/user.service.ts:14\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        prisma\n                                                  \n                                                        \n                                                                        PrismaService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        roomUserService\n                                                  \n                                                        \n                                                                        RoomUserService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        createGuestNicknameForUser\n                        \n                    \n                \n            \n            \n                \ncreateGuestNicknameForUser(nickname: string)\n                \n            \n\n\n            \n                \n                    Defined in src/user/user.service.ts:115\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    nickname\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        createUser\n                        \n                    \n                \n            \n            \n                \n                    \n                    createUser(nickname: string)\n                \n            \n\n\n            \n                \n                    Defined in src/user/user.service.ts:28\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    nickname\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findAllUsers\n                        \n                    \n                \n            \n            \n                \n                    \n                    findAllUsers()\n                \n            \n\n\n            \n                \n                    Defined in src/user/user.service.ts:62\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         Promise\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findSingleUser\n                        \n                    \n                \n            \n            \n                \n                    \n                    findSingleUser(userId: string)\n                \n            \n\n\n            \n                \n                    Defined in src/user/user.service.ts:72\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        joinUserWithTheRoomAndCreateTheirCards\n                        \n                    \n                \n            \n            \n                \n                    \n                    joinUserWithTheRoomAndCreateTheirCards(joinUserRoom: JoinUserRoom)\n                \n            \n\n\n            \n                \n                    Defined in src/user/user.service.ts:46\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    joinUserRoom\n                                    \n                                                JoinUserRoom\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        searchAUserAndNumberOfCards\n                        \n                    \n                \n            \n            \n                \n                    \n                    searchAUserAndNumberOfCards(userId: string)\n                \n            \n\n\n            \n                \n                    Defined in src/user/user.service.ts:90\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        userSelect\n                        \n                    \n                \n            \n                \n                    \n                        Type :         object\n\n                    \n                \n                \n                    \n                        Default value : {\n    id: true,\n    nickname: true,\n    score: true,\n  }\n                    \n                \n                    \n                        \n                                Defined in src/user/user.service.ts:22\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import { forwardRef, Inject, Injectable } from '@nestjs/common';\nimport { Prisma } from '@prisma/client';\nimport { PrismaService } from 'src/prisma/prisma.service';\nimport { RoomUserService } from 'src/room-user/room-user.service';\nimport { UserConnectedToRoom } from 'src/room-user/types/user-connected-to-room.type';\nimport { UserToRoom } from 'src/room-user/types/user-to-room.type';\nimport { notFoundError } from 'src/utils/not-found.util';\nimport { serverError } from 'src/utils/server-error.util';\nimport { JoinUserRoom } from './dto/join-user-room.dto';\nimport { User } from './entities/user.entity';\nimport { NumberOfUserCardsInARoom } from './types/number-of-user-cards-in-a-room.type';\n\n@Injectable()\nexport class UserService {\n  constructor(\n    private readonly prisma: PrismaService,\n\n    @Inject(forwardRef(() => RoomUserService))\n    private readonly roomUserService: RoomUserService,\n  ) {}\n\n  private userSelect = {\n    id: true,\n    nickname: true,\n    score: true,\n  };\n\n  async createUser(nickname: string): Promise {\n    nickname = this.createGuestNicknameForUser(nickname);\n\n    const data: Prisma.UserCreateInput = {\n      nickname,\n      score: 0,\n    };\n\n    const user: User = await this.prisma.user\n      .create({\n        data,\n        select: this.userSelect,\n      })\n      .catch(serverError);\n\n    return user;\n  }\n\n  async joinUserWithTheRoomAndCreateTheirCards(\n    joinUserRoom: JoinUserRoom,\n  ): Promise {\n    const user: User = await this.createUser(joinUserRoom.nickname);\n\n    const userToRoom: UserToRoom = {\n      userId: user.id,\n      roomId: joinUserRoom.roomId,\n    };\n\n    const userConnectedWithTheRoom: UserConnectedToRoom =\n      await this.roomUserService.userToRoomAndCreateCards(userToRoom);\n\n    return userConnectedWithTheRoom;\n  }\n\n  async findAllUsers(): Promise {\n    const users: User[] = await this.prisma.user\n      .findMany({\n        select: this.userSelect,\n      })\n      .catch(serverError);\n    notFoundError(users, 'users');\n    return users;\n  }\n\n  async findSingleUser(userId: string): Promise {\n    const user: User = await this.prisma.user\n      .findUnique({\n        where: { id: userId },\n        select: {\n          id: true,\n          nickname: true,\n          score: true,\n          cards: { select: { id: true, numbers: true } },\n        },\n      })\n      .catch(serverError);\n\n    notFoundError(user, `user with this id: (${userId})`);\n\n    return user;\n  }\n\n  async searchAUserAndNumberOfCards(\n    userId: string,\n  ): Promise {\n    const numbersOfCards: NumberOfUserCardsInARoom = await this.prisma.user\n      .findUnique({\n        where: { id: userId },\n        select: {\n          rooms: {\n            select: {\n              room: {\n                select: {\n                  userCards: true,\n                },\n              },\n            },\n          },\n        },\n      })\n      .catch(serverError);\n\n    notFoundError(numbersOfCards, `user with this id: (${userId})`);\n\n    return numbersOfCards;\n  }\n\n  createGuestNicknameForUser(nickname: string): string {\n    nickname = nickname.trim();\n    if (nickname == '') {\n      nickname = 'Convidado';\n    }\n    return nickname;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"changelog.html":{"url":"changelog.html","title":"getting-started - changelog","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"coverage.html":{"url":"coverage.html","title":"coverage - coverage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    Documentation coverage\n\n\n\n    \n\n\n\n    \n        \n            File\n            Type\n            Identifier\n            Statements\n        \n    \n    \n        \n            \n                \n                src/app.controller.ts\n            \n            controller\n            AppController\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/app.gateway.ts\n            \n            class\n            AppGateway\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/app.service.ts\n            \n            injectable\n            AppService\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/auth/auth.controller.ts\n            \n            controller\n            AuthController\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/auth/auth.service.ts\n            \n            injectable\n            AuthService\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/auth/authenticated-user.decorator.ts\n            \n            variable\n            AuthenticatedUser\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/auth/dto/user-auth.dto.ts\n            \n            class\n            UserAuthDto\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/auth/jwt.strategy.ts\n            \n            injectable\n            JwtStrategy\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/card/card.service.ts\n            \n            injectable\n            CardService\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/card/entities/card.entity.ts\n            \n            class\n            Card\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/main.ts\n            \n            function\n            bootstrap\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/prisma/prisma.service.ts\n            \n            injectable\n            PrismaService\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/room-user/dto/create-room-and-user.dto.ts\n            \n            class\n            CreateRoomAndUserDto\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/room-user/room-user.controller.ts\n            \n            controller\n            RoomUserController\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/room-user/room-user.service.ts\n            \n            injectable\n            RoomUserService\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/room/entities/room.entity.ts\n            \n            class\n            Room\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/room/room.controller.ts\n            \n            controller\n            RoomController\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/room/room.service.ts\n            \n            injectable\n            RoomService\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                src/user/dto/join-user-room.dto.ts\n            \n            class\n            JoinUserRoom\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/user/entities/user.entity.ts\n            \n            class\n            User\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/user/user.controller.ts\n            \n            controller\n            UserController\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/user/user.service.ts\n            \n            injectable\n            UserService\n            \n                0 %\n                (0/9)\n            \n        \n        \n            \n                \n                src/utils/handle-error.util.ts\n            \n            function\n            handleError\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/utils/is-admin.util.ts\n            \n            function\n            isAdmin\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/utils/not-found.util.ts\n            \n            function\n            notFoundError\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/utils/server-error.util.ts\n            \n            function\n            serverError\n            \n                0 %\n                (0/1)\n            \n        \n    \n\n\n\n\n\n    new Tablesort(document.getElementById('coverage-table'));\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Dependencies\n    \n    \n        \n            @nestjs/common : ^9.0.0\n        \n            @nestjs/core : ^9.0.0\n        \n            @nestjs/jwt : ^9.0.0\n        \n            @nestjs/mapped-types : *\n        \n            @nestjs/passport : ^9.0.0\n        \n            @nestjs/platform-express : ^9.0.0\n        \n            @nestjs/platform-socket.io : ^9.0.8\n        \n            @nestjs/schedule : ^2.1.0\n        \n            @nestjs/swagger : ^6.0.5\n        \n            @nestjs/websockets : ^9.0.8\n        \n            @prisma/client : ^4.1.1\n        \n            bcrypt : ^5.0.1\n        \n            class-transformer : ^0.5.1\n        \n            class-validator : ^0.13.2\n        \n            passport : ^0.6.0\n        \n            passport-jwt : ^4.0.0\n        \n            passport-local : ^1.0.0\n        \n            reflect-metadata : ^0.1.13\n        \n            rimraf : ^3.0.2\n        \n            rxjs : ^7.2.0\n        \n            swagger-ui-express : ^4.5.0\n        \n            webpack : ^5.74.0\n    \n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/functions.html":{"url":"miscellaneous/functions.html","title":"miscellaneous-functions - functions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Functions\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            bootstrap   (src/.../main.ts)\n                        \n                        \n                            handleError   (src/.../handle-error.util.ts)\n                        \n                        \n                            isAdmin   (src/.../is-admin.util.ts)\n                        \n                        \n                            notFoundError   (src/.../not-found.util.ts)\n                        \n                        \n                            serverError   (src/.../server-error.util.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/main.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        bootstrap\n                        \n                    \n                \n            \n            \n                \nbootstrap()\n                \n            \n\n\n\n\n        \n    \n    src/utils/handle-error.util.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        handleError\n                        \n                    \n                \n            \n            \n                \nhandleError(error: Error)\n                \n            \n\n\n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    error\n                                    \n                                            Error\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     undefined\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    src/utils/is-admin.util.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        isAdmin\n                        \n                    \n                \n            \n            \n                \nisAdmin(data: any)\n                \n            \n\n\n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    data\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    src/utils/not-found.util.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        notFoundError\n                        \n                    \n                \n            \n            \n                \nnotFoundError(data: any, obj: string)\n                \n            \n\n\n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    data\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    obj\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    src/utils/server-error.util.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        serverError\n                        \n                    \n                \n            \n            \n                \nserverError(error: Error)\n                \n            \n\n\n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    error\n                                    \n                                            Error\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     undefined\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"getting-started - index","body":"\n                   \n\nBingo do G5\nUm parágrafo da descrição do projeto vai aqui\n🚀 Começando\nEssas instruções permitirão que você obtenha uma cópia do projeto em operação na sua máquina local para fins de desenvolvimento e teste.\n📋 Pré-requisitos\nDe que coisas você precisa para instalar o software e como instalá-lo?\nDar exemplos🔧 Instalação\nUma série de exemplos passo-a-passo que informam o que você deve executar para ter um ambiente de desenvolvimento em execução.\nDiga como essa etapa será:\nDar exemplosE repita:\nAté finalizarTermine com um exemplo de como obter dados do sistema ou como usá-los para uma pequena demonstração.\n⚙️ Executando os testes\nExplicar como executar os testes automatizados para este sistema.\n🔩 Analise os testes de ponta a ponta\nExplique que eles verificam esses testes e porquê.\nDar exemplos⌨️ E testes de estilo de codificação\nExplique que eles verificam esses testes e porquê.\nDar exemplos🛠️ Construído com\nNodeJs | Typescript | React | PostgreSQL\n✒️ Autores\n\nLuis Couto - Front-end - GITHUB\nLeonardo Tinoco - Back-end - GITHUB\nLucas Marques - Back-end - GITHUB\nMarcelo Santos - Back-end - GITHUB\nRamon Lopes - Front-end - GITHUB\n\n📄 Licença\nEste projeto está sob a licença MIT License - veja o arquivo LICENSE.md para detalhes.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"license.html":{"url":"license.html","title":"getting-started - license","body":"\n                   \n\nMIT License\nCopyright (c) 2022 Lucas Marques\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n            \n                \n                    \n                        AppModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        AuthModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        CardModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        PrismaModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        RoomModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        RoomUserModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        UserModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"overview.html":{"url":"overview.html","title":"overview - overview","body":"\n                   \n\n\n\n    Overview\n\n  \n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\ncluster_AppModule_providers\n\n\n\ncluster_AuthModule\n\n\n\ncluster_AuthModule_providers\n\n\n\ncluster_PrismaModule\n\n\n\ncluster_PrismaModule_exports\n\n\n\ncluster_PrismaModule_providers\n\n\n\n\nAuthModule\n\nAuthModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAuthModule->AppModule\n\n\n\n\n\nCardModule\n\nCardModule\n\nAppModule -->\n\nCardModule->AppModule\n\n\n\n\n\nPrismaModule\n\nPrismaModule\n\nAuthModule -->\n\nPrismaModule->AuthModule\n\n\n\nCardModule -->\n\nPrismaModule->CardModule\n\n\n\n\n\nRoomModule\n\nRoomModule\n\nRoomModule -->\n\nPrismaModule->RoomModule\n\n\n\n\n\nUserModule\n\nUserModule\n\nUserModule -->\n\nPrismaModule->UserModule\n\n\n\nAppModule -->\n\nPrismaModule->AppModule\n\n\n\n\n\nPrismaService \n\nPrismaService \n\nPrismaService  -->\n\nPrismaModule->PrismaService \n\n\n\nAppModule -->\n\nRoomModule->AppModule\n\n\n\n\n\nRoomUserModule\n\nRoomUserModule\n\nAppModule -->\n\nRoomUserModule->AppModule\n\n\n\nAppModule -->\n\nUserModule->AppModule\n\n\n\n\n\nAppService\n\nAppService\n\nAppModule -->\n\nAppService->AppModule\n\n\n\n\n\nAuthService\n\nAuthService\n\nAuthModule -->\n\nAuthService->AuthModule\n\n\n\nCardModule -->\n\nAuthService->CardModule\n\n\n\nRoomModule -->\n\nAuthService->RoomModule\n\n\n\nRoomUserModule -->\n\nAuthService->RoomUserModule\n\n\n\nUserModule -->\n\nAuthService->UserModule\n\n\n\n\n\nCardService\n\nCardService\n\nAuthModule -->\n\nCardService->AuthModule\n\n\n\nCardModule -->\n\nCardService->CardModule\n\n\n\nRoomModule -->\n\nCardService->RoomModule\n\n\n\nRoomUserModule -->\n\nCardService->RoomUserModule\n\n\n\nUserModule -->\n\nCardService->UserModule\n\n\n\n\n\nJwtStrategy\n\nJwtStrategy\n\nAuthModule -->\n\nJwtStrategy->AuthModule\n\n\n\n\n\nRoomService\n\nRoomService\n\nAuthModule -->\n\nRoomService->AuthModule\n\n\n\nCardModule -->\n\nRoomService->CardModule\n\n\n\nRoomModule -->\n\nRoomService->RoomModule\n\n\n\nRoomUserModule -->\n\nRoomService->RoomUserModule\n\n\n\nUserModule -->\n\nRoomService->UserModule\n\n\n\n\n\nRoomUserService\n\nRoomUserService\n\nAuthModule -->\n\nRoomUserService->AuthModule\n\n\n\nCardModule -->\n\nRoomUserService->CardModule\n\n\n\nRoomModule -->\n\nRoomUserService->RoomModule\n\n\n\nRoomUserModule -->\n\nRoomUserService->RoomUserModule\n\n\n\nUserModule -->\n\nRoomUserService->UserModule\n\n\n\n\n\nUserService\n\nUserService\n\nAuthModule -->\n\nUserService->AuthModule\n\n\n\nCardModule -->\n\nUserService->CardModule\n\n\n\nRoomModule -->\n\nUserService->RoomModule\n\n\n\nRoomUserModule -->\n\nUserService->RoomUserModule\n\n\n\nUserModule -->\n\nUserService->UserModule\n\n\n\n\n\nPrismaService\n\nPrismaService\n\nPrismaModule -->\n\nPrismaService->PrismaModule\n\n\n\nRoomUserModule -->\n\nPrismaService->RoomUserModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n  \n\n    \n        \n            \n                \n                    \n                    \n                        7 Modules\n                    \n                \n            \n        \n        \n            \n                \n                    \n                    5 Controllers\n                \n            \n        \n        \n            \n                \n                    \n                    8 Injectables\n                \n            \n        \n        \n            \n                \n                    \n                    7 Classes\n                \n            \n        \n    \n\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"properties.html":{"url":"properties.html","title":"package-properties - properties","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Properties\n    \n    \n        \n            Version : 0.0.1\n        \n            Description : \n        \n            License : UNLICENSED\n        \n            Author : \n    \n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"todo.html":{"url":"todo.html","title":"getting-started - todo","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/typealiases.html":{"url":"miscellaneous/typealiases.html","title":"miscellaneous-typealiases - typealiases","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Type aliases\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            AuthUserResponse   (src/.../user-auth-response.type.ts)\n                        \n                        \n                            CreateCard   (src/.../create-a-card.type.ts)\n                        \n                        \n                            CreateRoom   (src/.../create-room.type.ts)\n                        \n                        \n                            GeneratedCard   (src/.../generated-card.type.ts)\n                        \n                        \n                            NumberOfUserCardsInARoom   (src/.../number-of-user-cards-in-a-room.type.ts)\n                        \n                        \n                            RoomUserAndCards   (src/.../room-user-and-cards.type.ts)\n                        \n                        \n                            RoomWithUsersAndCards   (src/.../room-with-users-and-cards.type.ts)\n                        \n                        \n                            UserAndHisCards   (src/.../user-and-his-cards.type.ts)\n                        \n                        \n                            UserAndRoomAuth   (src/.../user-id-auth.type.ts)\n                        \n                        \n                            UserCardsInRoom   (src/.../number-of-user-cards-in-a-room.type.ts)\n                        \n                        \n                            UserConnectedToRoom   (src/.../user-connected-to-room.type.ts)\n                        \n                        \n                            UserToRoom   (src/.../user-to-room.type.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/auth/types/user-auth-response.type.ts\n    \n    \n        \n            \n                \n                    \n                    AuthUserResponse\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    src/card/types/create-a-card.type.ts\n    \n    \n        \n            \n                \n                    \n                    CreateCard\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    src/room/types/create-room.type.ts\n    \n    \n        \n            \n                \n                    \n                    CreateRoom\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    src/card/types/generated-card.type.ts\n    \n    \n        \n            \n                \n                    \n                    GeneratedCard\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    src/user/types/number-of-user-cards-in-a-room.type.ts\n    \n    \n        \n            \n                \n                    \n                    NumberOfUserCardsInARoom\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    UserCardsInRoom\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    src/room-user/types/room-user-and-cards.type.ts\n    \n    \n        \n            \n                \n                    \n                    RoomUserAndCards\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    src/room-user/types/room-with-users-and-cards.type.ts\n    \n    \n        \n            \n                \n                    \n                    RoomWithUsersAndCards\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    src/user/types/user-and-his-cards.type.ts\n    \n    \n        \n            \n                \n                    \n                    UserAndHisCards\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    src/auth/types/user-id-auth.type.ts\n    \n    \n        \n            \n                \n                    \n                    UserAndRoomAuth\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    src/room-user/types/user-connected-to-room.type.ts\n    \n    \n        \n            \n                \n                    \n                    UserConnectedToRoom\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    src/room-user/types/user-to-room.type.ts\n    \n    \n        \n            \n                \n                    \n                    UserToRoom\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/variables.html":{"url":"miscellaneous/variables.html","title":"miscellaneous-variables - variables","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Variables\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            AuthenticatedUser   (src/.../authenticated-user.decorator.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/auth/authenticated-user.decorator.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        AuthenticatedUser\n                        \n                    \n                \n            \n                \n                    \n                        Default value : createParamDecorator(\n  (_, ctx: ExecutionContext) => {\n    const request = ctx.switchToHttp().getRequest();\n    const userAndRoom: UserAndRoomAuth = request.user;\n\n    if (!userAndRoom) {\n      throw new UnauthorizedException(\n        'User does not have permission to access this route',\n      );\n    }\n\n    return userAndRoom;\n  },\n)\n                    \n                \n\n\n        \n    \n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
